{"componentChunkName":"component---src-templates-docs-js","path":"/technical-career-path-and-guide/1.chrome-extension-development","result":{"data":{"site":{"siteMetadata":{"title":"DevBucket","docsLocation":""}},"mdx":{"fields":{"id":"f384ff32-f048-531a-9b9f-993ef8c3542a","title":"Chrome Extension Development","slug":"/technical-career-path-and-guide/1.chrome-extension-development"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Chrome Extension Development\",\n  \"metaTitle\": \"Chrome Extension Development | DevBucket\",\n  \"metaDescription\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Chrome Extension Development\"), mdx(\"p\", null, \"Chrome Extension Development is the process of creating browser extensions that enhance the functionality of the Google Chrome browser. Chrome extensions are small software programs that can modify and extend the browser's behavior, add new features, and provide additional functionality.\"), mdx(\"p\", null, \"Here are the steps involved in Chrome Extension Development:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Define the extension's purpose and functionality:\"), \" Determine what problem the extension will solve and what features it will provide.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Design the user interface:\"), \" Decide how the extension will interact with the user, and create a user interface that is intuitive and easy to use.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Create the extension's manifest file:\"), \" This file is the backbone of the extension, containing information such as the name, version number, and description, as well as details about the extension's functionality, including permissions and scripts.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Write the extension's code:\"), \" Use HTML, CSS, and JavaScript to create the functionality of the extension. This includes writing content scripts that can modify web pages and background scripts that can perform actions independently of the current web page.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Test the extension:\"), \" Use Chrome's developer tools to test the extension's functionality and debug any issues that arise.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Publish the extension:\"), \" Upload the extension to the Chrome Web Store and make it available to users.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Maintain the extension:\"), \" Monitor user feedback, fix bugs, and update the extension to keep up with changes in the Chrome browser and extension APIs.\")), mdx(\"p\", null, \"Chrome Extension Development is a rewarding process that can result in an extension that makes the browsing experience more efficient, productive, and enjoyable. With the right approach and attention to detail, a Chrome extension can be a valuable addition to the browser ecosystem.\"), mdx(\"h3\", null, \"Learning Path for Chrome extension development\"), mdx(\"p\", null, \"Here is a recommended path for learning Chrome extension development:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Understand the basics of HTML, CSS, and JavaScript:\"), \" These are the foundational technologies that you will be using to develop Chrome extensions. You should have a good understanding of HTML tags, CSS selectors, and JavaScript syntax.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Learn about the Chrome extension architecture:\"), \" Read the Chrome Extension Architecture Overview to understand how different parts of the extension work together and how they communicate.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Set up a development environment:\"), \" Install Chrome and a text editor of your choice. You can use Visual Studio Code, Sublime Text, or any other text editor that supports JavaScript.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Create a basic Chrome extension:\"), \" Follow the Getting Started tutorial in the Chrome Extension Developer Guide to create a basic extension that displays a message when you click the browser action icon.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Learn about the Chrome extension APIs:\"), \" Read the Chrome Extension API Reference to learn about the different APIs available for Chrome extensions. Experiment with different APIs to see how they work.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Develop a real-world Chrome extension:\"), \" Come up with an idea for a useful Chrome extension and develop it. You can use the Chrome Extension Samples for inspiration.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Test and debug your extension:\"), \" Use the Chrome Developer Tools to test and debug your extension. Make sure it works as expected and fix any bugs you find.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Publish your extension:\"), \" Upload your extension to the Chrome Web Store and make it available to users. Use the Chrome Web Store Developer Dashboard to manage your extension and view analytics.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Continuously improve your extension:\"), \" Listen to user feedback and make improvements to your extension. Keep up with updates to the Chrome browser and extension APIs.\")), mdx(\"p\", null, \"Remember that Chrome extension development is an iterative process. You will likely need to make multiple iterations of your extension before it is polished and bug-free. Stay patient and keep learning as you go!\"), mdx(\"h2\", null, \"Chrome Extension Anatomy\"), mdx(\"p\", null, \"The anatomy of a Chrome extension is flexible, and not all extensions require all of these components. For example, some extensions may only have a background script and a browser action, while others may have multiple content scripts and use third-party libraries extensively. The specific components used by an extension depend on its functionality and requirements.\"), mdx(\"p\", null, \"Chrome Extension Anatomy refers to the individual components that make up a Chrome extension. These components include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Manifest file:\"), \" This is a JSON file that provides information about the extension, such as its name, version, and permissions. It also specifies the background script, content scripts, icons, and other resources used by the extension.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Background script:\"), \" This is a JavaScript file that runs in the background of the browser and is responsible for performing tasks that require continuous processing, such as handling browser events, making network requests, and managing extension state.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Content scripts:\"), \" These are JavaScript files that run in the context of a web page and are used to modify the behavior or appearance of the page. They can interact with the DOM, listen for events, and communicate with the background script.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Popup:\"), \" This is a browser action that opens a small window when the user clicks the extension icon. It can display information or provide a user interface for the extension.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Options page:\"), \" This is a web page that allows the user to configure the extension settings.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Icons:\"), \" These are the visual representations of the extension that are displayed in the browser toolbar, the Chrome Web Store, and other places where the extension is shown.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Localization files:\"), \" These are JSON files that contain translations of the extension user interface into different languages.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Third-party libraries:\"), \" These are external JavaScript libraries that are used by the extension to provide additional functionality or simplify development.\")), mdx(\"h2\", null, \"Chrome Extension Architecture\"), mdx(\"p\", null, \"Chrome Extension Architecture, on the other hand, refers to the overall structure and design of a Chrome extension. The architecture of a Chrome extension is based on the messaging passing mechanism between content scripts and background pages. \"), mdx(\"p\", null, \"The main components of Chrome Extension Architecture are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Content scripts:\"), \" These are JavaScript files that run in the context of a web page and can modify the behavior or appearance of the page.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Background page:\"), \" This is a hidden HTML page that runs in the background of the browser and can perform tasks that require continuous processing, such as managing the extension's state and handling browser events.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Messaging passing:\"), \" This is the mechanism that allows the content scripts and background page to communicate with each other.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"API bindings:\"), \" These are JavaScript functions that allow the content scripts and background page to interact with the Chrome browser, such as making network requests or manipulating tabs and windows.\")), mdx(\"p\", null, \"Overall, the Chrome extension architecture provides a flexible and powerful way to extend the functionality of the Chrome browser and interact with web pages.\"), mdx(\"h3\", null, \"Chrome Extension Anatomy VS Architecture\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Chrome Extension Anatomy\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Chrome Extension Architecture\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Manifest file\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Messaging passing\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Background script\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Background page\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Content scripts\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Content scripts\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Popup\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"API bindings\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Options page\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Icons\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Localization files\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Third-party libraries\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })))), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Chrome Extension Anatomy\"), \" refers to the individual components that make up a Chrome extension, including the manifest file, background script, content scripts, popup, options page, icons, localization files, and third-party libraries. These components work together to provide the functionality of the extension.\"), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Chrome Extension Architecture\"), \", on the other hand, refers to the overall structure and design of a Chrome extension, including the messaging passing mechanism between content scripts and background pages, and the API bindings that allow the content scripts and background page to interact with the Chrome browser.\"), mdx(\"p\", null, \"Both the Chrome Extension Anatomy and Chrome Extension Architecture are important for creating a successful Chrome extension. Understanding these concepts will help you create a well-designed and functional extension.\"), mdx(\"h2\", null, \"Types of Extension\"), mdx(\"p\", null, \"There are two main types of Chrome extensions based on their user interface placement: browser action and page action.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Browser action:\"), \" A browser action extension displays an icon in the Chrome toolbar next to the address bar. When a user clicks on the icon, it can open a popup window or execute a specific action. Browser action extensions are useful for providing quick access to the extension's functionality or for displaying information related to the current web page.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Page action:\"), \" A page action extension displays an icon in the Chrome toolbar only when certain conditions are met, such as when the user navigates to a specific website or performs a specific action on a web page. When the user clicks on the icon, it can execute a specific action or display information related to the current web page. Page action extensions are useful for providing context-specific functionality or information.\"))), mdx(\"p\", null, \"Overall, both browser action and page action extensions can be useful for enhancing the functionality of the Chrome browser and providing users with quick access to useful features or information. The choice between the two types of extensions depends on the specific use case and the desired user experience.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Feature\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Browser Action Extension\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Page Action Extension\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Placement\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Displayed in the Chrome toolbar next to the address bar\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Displayed in the Chrome toolbar only when certain conditions are met, such as when the user navigates to a specific website or performs a specific action on a web page\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Accessibility\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Always visible to the user, providing quick access to the extension's functionality\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Only visible when specific conditions are met, providing context-specific functionality\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Functionality\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Typically used for providing quick access to the extension's functionality or for displaying information related to the current web page\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Useful for providing context-specific functionality or information\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Interaction\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Typically provides a popup window when the user clicks on the icon\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Can execute a specific action or display information related to the current web page\")))), mdx(\"h2\", null, \"How Chrome Extenstion works under the hood\"), mdx(\"p\", null, \"Chrome extensions are built using web technologies such as HTML, CSS, and JavaScript. They run in a separate process from the browser and can interact with the browser through a set of APIs provided by the Chrome browser.\"), mdx(\"p\", null, \"When a user installs a Chrome extension, the browser loads the extension's manifest file, which provides information about the extension, including its name, version, and permissions required to function. The manifest file also specifies which scripts and resources should be loaded when the extension is enabled.\"), mdx(\"p\", null, \"The extension's background page runs continuously in the background, listening for events such as when the user opens a new tab or clicks on the extension icon. The background page can also interact with the browser through various APIs, such as the tabs API for interacting with web pages, the storage API for storing data locally, or the messaging API for communicating with other parts of the extension or with external services.\"), mdx(\"p\", null, \"The extension can also inject scripts into web pages to modify their behavior or appearance, using the content script API. Content scripts can access the DOM of the web page and interact with it using standard web technologies such as JavaScript and CSS.\"), mdx(\"p\", null, \"In addition, Chrome extensions can use native messaging to communicate with native applications running on the user's computer. Native messaging allows extensions to extend their functionality beyond the capabilities of web technologies, by enabling communication with native code.\"), mdx(\"p\", null, \"Overall, Chrome extensions work under the hood by leveraging web technologies, interacting with the browser through a set of APIs, and injecting scripts into web pages to modify their behavior or appearance. By using these tools, developers can create powerful and useful extensions that enhance the functionality of the Chrome brow\"), mdx(\"h2\", null, \"Manifest File\"), mdx(\"p\", null, \"The manifest file is a JSON configuration file that contains important information about a Chrome extension, including its name, version, permissions, background script, and content scripts. It is named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"manifest.json\"), \" and must be placed in the root directory of the extension. The manifest file defines the behavior and features of the extension and serves as the main entry point.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Here are some of the key components of the manifest file:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Name and Version:\"), \" Every extension must have a name and a version number specified in the manifest file.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Icons:\"), \" Icons are images that represent the extension in various contexts, such as the browser toolbar, Chrome Web Store, and more. The manifest file specifies the icons used by the extension.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Permissions:\"), \" The permissions element specifies what the extension can do, such as accessing tabs or the user's location. The user must approve the requested permissions when installing the extension.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Content Scripts:\"), \" Content scripts are JavaScript files that can manipulate the DOM of a web page. The manifest file specifies which content scripts the extension uses.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Background Scripts/Pages:\"), \" The background scripts or pages are JavaScript files that run in the background and can interact with the browser and other extension components.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Browser Action/Page Action:\"), \" Browser action and page action are buttons that appear in the Chrome toolbar. The manifest file specifies the appearance and behavior of the buttons.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Options Page:\"), \" The options page is a web page that lets users configure the extension's settings. The manifest file specifies the URL of the options page.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Here is an example of a manifest file:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JSON\"\n  }, \"{\\n  \\\"manifest_version\\\": 2,\\n  \\\"name\\\": \\\"My Extension\\\",\\n  \\\"version\\\": \\\"1.0\\\",\\n  \\\"description\\\": \\\"This is my first Chrome extension.\\\",\\n  \\\"icons\\\": {\\n    \\\"16\\\": \\\"icon16.png\\\",\\n    \\\"48\\\": \\\"icon48.png\\\",\\n    \\\"128\\\": \\\"icon128.png\\\"\\n  },\\n  \\\"permissions\\\": [\\n    \\\"tabs\\\"\\n  ],\\n  \\\"background\\\": {\\n    \\\"scripts\\\": [\\n      \\\"background.js\\\"\\n    ],\\n    \\\"persistent\\\": false\\n  },\\n  \\\"browser_action\\\": {\\n    \\\"default_title\\\": \\\"My Extension\\\",\\n    \\\"default_icon\\\": \\\"icon.png\\\",\\n    \\\"default_popup\\\": \\\"popup.html\\\"\\n  }\\n}\\n\")), mdx(\"p\", null, \"In this example, the manifest file specifies the name, version, description, icons, permissions, background script, and browser action for the extension.\"), mdx(\"h2\", null, \"Popup Page\"), mdx(\"p\", null, \"A Popup Page is an HTML page that appears on top of the current web page when the user clicks on the browser extension's icon. It is specified in the extension's manifest file and can be used to interact with the user and provide information or functionality without navigating to a new page or opening a new window. \"), mdx(\"p\", null, \"It can contain form elements, buttons, links, images, and other HTML elements, and it can interact with the extension's background page and other components using JavaScript. \"), mdx(\"p\", null, \"Examples of using a Popup Page include displaying the extension's current status, providing a settings page, showing notifications, and performing actions on the current web page.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"To create a Popup Page for a browser extension, you need to:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a HTML file that will be used as the Popup Page.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add the HTML file to the extension's manifest file as a popup page.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Write JavaScript code to interact with the Popup Page and other extension components.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Here's a basic example of how to work with a popup page in a Chrome extension:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a new folder for your extension and add a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"manifest.json\"), \" file.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add the following code to your manifest.json file:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JSON\"\n  }, \"{\\n  \\\"name\\\": \\\"My Extension\\\",\\n  \\\"version\\\": \\\"1.0\\\",\\n  \\\"manifest_version\\\": 3,\\n  \\\"action\\\": {\\n    \\\"default_popup\\\": \\\"popup.html\\\"\\n  }\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This code sets up the basic structure of your extension and tells it to use a popup page called popup.html.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a new file called popup.html in the same folder as your manifest.json file.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add the following code to your popup.html file:\\nThis code creates a basic HTML page that will be displayed when the user clicks on the extension icon in their browser.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-HTML\"\n  }, \"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>My Extension Popup</title>\\n  </head>\\n  <body>\\n    <h1>Hello, world!</h1>\\n  </body>\\n</html>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Save your manifest.json and popup.html files.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open Google Chrome and navigate to the Extensions page (chrome://extensions/).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Turn on Developer mode by toggling the switch in the top right corner.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click on the \\\"Load unpacked\\\" button in the top left corner.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Select the folder containing your extension and click \\\"Select\\\".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Your extension should now be installed and the popup page should be displayed when you click on the extension icon.\")), mdx(\"p\", null, \"This is just a basic example, but you can customize your popup page by adding CSS styles, JavaScript code, and other HTML elements to it. You can also use JavaScript to interact with the content of the current tab or the background page of your extension.\"), mdx(\"h2\", null, \"Background Page\"), mdx(\"p\", null, \"The background page is a persistent HTML page that runs continuously in the background of the browser while the extension is installed. It is defined in the manifest file under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"background\"), \" -> \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"page\"), \". The background page has access to all of the extension's APIs, can interact with content scripts, popup windows, and other parts of the extension, and can execute scripts even when the extension's popup is closed. It is typically used for long-running tasks, such as checking for new content or monitoring browser events.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Some examples of what a background page might do include:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Listen for changes in tabs or windows and react accordingly\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Manage and communicate with other parts of the extension, like content scripts or popup windows\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Intercept and modify network requests using the webRequest API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Schedule periodic tasks or alarms using the chrome.alarms API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Manage settings and state for the extension using local storage or synced storage APIs\")), mdx(\"p\", null, \"To create a background page, you first need to define it in the extension's manifest file. In the manifest file, you'll specify a script or HTML file to be used as the background page. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"For example:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JSON\"\n  }, \"{\\n  \\\"name\\\": \\\"My Extension\\\",\\n  \\\"version\\\": \\\"1.0\\\",\\n  \\\"manifest_version\\\": 2,\\n  \\\"background\\\": {\\n    \\\"page\\\": \\\"background.html\\\"\\n  },\\n  \\\"permissions\\\": [\\n    \\\"tabs\\\",\\n    \\\"webRequest\\\",\\n    \\\"storage\\\"\\n  ]\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Here's an example of a simple background page for a Chrome extension:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// background.js\\n\\nchrome.runtime.onInstalled.addListener(function() {\\n  console.log('Extension installed!');\\n});\\n\\nchrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {\\n  if (changeInfo.status === 'complete' && tab.url.includes('example.com')) {\\n    chrome.tabs.executeScript(tabId, {file: 'content.js'});\\n  }\\n});\\n\")), mdx(\"p\", null, \"In this example, the background page listens for the chrome.runtime.onInstalled event, which fires when the extension is first installed. It also listens for the chrome.tabs.onUpdated event, which fires whenever a tab is updated. If the tab's URL includes \\\"example.com\\\" and the update status is \\\"complete\\\", the background page executes a content script (content.js) on that tab using the chrome.tabs.executeScript() method. This is just a simple example, but it demonstrates some of the basic functionality that a background page can provide.\"), mdx(\"h2\", null, \"Background Script\"), mdx(\"p\", null, \"A background script is a JavaScript file that runs continuously in the background of a Chrome extension and is defined in the manifest file under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"background\"), \" -> \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scripts\"), \". It has access to all of the extension's APIs and can interact with other parts of the extension, but it does not have a persistent UI like the background page. It is useful for handling things like notifications, web requests, and browser actions, and is typically used for listening to events, performing actions based on user input, or executing tasks that do not require a UI.\"), mdx(\"p\", null, \"The background script is useful for running long-lived tasks or handling events that occur outside the scope of the extension, such as push notifications. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Here are some examples of tasks that can be performed by a background script:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Listening to events such as the user clicking a button or the page loading, and taking appropriate actions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Modifying the content of web pages or injecting scripts into them\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Communicating with external APIs or services to fetch or submit data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Managing storage and preferences for the extension\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Monitoring tabs and injecting CSS or JavaScript into a page based on certain triggers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Making requests to APIs or other web services\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tracking the user's browsing history and behavior\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Managing settings or user preferences for the extension\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"To work with background scripts, you can follow these steps:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Define the background script file in the manifest file:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JSON\"\n  }, \"\\\"background\\\": {\\n  \\\"scripts\\\": [\\\"background.js\\\"],\\n  \\\"persistent\\\": false\\n},\\n\")), mdx(\"p\", null, \"Here, \\\"background.js\\\" is the name of the JavaScript file that will run in the background. The \\\"persistent\\\" option indicates whether the background script should continue running even when the extension is not in use.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create the background script file and add your code.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// background.js\\nconsole.log(\\\"Background script is running!\\\");\\n\\n// Listen to the browser action button\\nchrome.browserAction.onClicked.addListener(function(tab) {\\n  // Open the extension's popup page\\n  chrome.runtime.openPopup();\\n});\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use the chrome.runtime API to interact with other parts of the extension, such as content scripts or the popup page.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// Send a message to a content script\\nchrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {\\n  chrome.tabs.sendMessage(tabs[0].id, { action: \\\"showMessage\\\", data: \\\"Hello!\\\" });\\n});\\n\\n// Receive a message from the popup page\\nchrome.runtime.onMessage.addListener(function(message, sender, sendResponse) {\\n  if (message.action === \\\"doSomething\\\") {\\n    console.log(\\\"Doing something...\\\");\\n    sendResponse({ success: true });\\n  }\\n});\\n\")), mdx(\"p\", null, \"Overall, background scripts are a powerful tool for creating advanced Chrome extensions that can perform complex tasks in the background without requiring user interaction.\"), mdx(\"h2\", null, \"Content Scripts\"), mdx(\"p\", null, \"Content scripts are JavaScript files that are injected into a web page that the extension has permission to access. They run in the context of the web page and can modify its DOM, listen for events, and communicate with the background page. They are defined in the manifest file under content_scripts and are useful for modifying the appearance or behavior of the web page, such as adding new elements or intercepting requests. Content scripts are a crucial component in Chrome extensions that allow the extension to interact with and modify the content of web pages.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Some examples of things a content script could do include:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding custom CSS styles to a page\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Injecting JavaScript code to interact with the page's content\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Modifying the HTML of a page to add new functionality or change the layout\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Responding to user events like clicks or key presses\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Here are some key points to know about content scripts:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Content scripts run in the context of a specific tab or frame, and they have access to the DOM and JavaScript environment of that tab or frame.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Content scripts can be specified in the manifest file using the content_scripts field.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Content scripts can be used to modify the behavior or appearance of web pages. For example, a content script can remove or add elements to a page, change the styling, or inject additional JavaScript code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Content scripts can communicate with other scripts running in different contexts, such as background scripts, using messaging passing.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Content scripts have some limitations, such as being unable to access the extension's APIs directly. To overcome this limitation, they can communicate with the background script, which can access the extension's APIs.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Here's an example of a simple content script:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"content script that adds a red border around all images on a web page:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// contentScript.js\\n\\n// Add a red border around all images on the page\\nconst images = document.getElementsByTagName('img');\\nfor (let i = 0; i < images.length; i++) {\\n  images[i].style.border = '2px solid red';\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To use this content script, we need to specify it in the manifest file:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JSON\"\n  }, \"// manifest.json\\n\\n{\\n  \\\"name\\\": \\\"My Extension\\\",\\n  \\\"version\\\": \\\"1.0\\\",\\n  \\\"manifest_version\\\": 2,\\n  \\\"content_scripts\\\": [\\n    {\\n      \\\"matches\\\": [\\\"https://www.example.com/*\\\"],\\n      \\\"js\\\": [\\\"contentScript.js\\\"]\\n    }\\n  ]\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We need to include a \\\"content_scripts\\\" key in your extension's manifest file, which specifies the JavaScript file to run and the web pages it should run on.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Here, \\\"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.example.com/*%22\"\n  }, \"https://www.example.com/*\\\"\"), \" is the URL pattern for the web pages where the content script will run. \\\"contentScript.js\\\" is the name of the JavaScript file that will be injected into the page. The \\\"run_at\\\" option specifies when the script should run - in this case, \\\"document_end\\\" indicates that the script should run after the page has finished loading.\")), mdx(\"p\", null, \"Content scripts are JavaScript files that run in the context of web pages. They can manipulate the DOM, listen to events, and communicate with other scripts running in different contexts, such as background scripts.\"), mdx(\"h2\", null, \"Messaging Passing\"), mdx(\"p\", null, \"Messaging passing is a technique used in Chrome extensions that allows different components of the extension, such as content scripts, background scripts, and popup pages, to communicate with each other by sending and receiving messages. This enables different parts of the extension to cooperate and coordinate their actions, share data and information, and perform complex tasks. \"), mdx(\"p\", null, \"The most common method for messaging passing in Chrome extensions is using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chrome.runtime.sendMessage\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chrome.runtime.onMessage\"), \" APIs.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To send a message from one component to another, we can use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chrome.runtime.sendMessage\"), \" function. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To receive messages, you use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chrome.runtime.onMessage\"), \" event.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The Chrome extension API provides several methods for messaging passing, including:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"chrome.runtime.sendMessage():\"), \" used to send a message from a content script or popup window to a background script.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"chrome.runtime.onMessage:\"), \" used to listen for messages in a background script.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"chrome.tabs.sendMessage():\"), \" used to send a message from a content script to the current active tab.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"chrome.extension.connect():\"), \" used to establish a long-lived connection between a content script and a background script.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Here's an example of how messaging passing works in a Chrome extension:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The content script sends a message to the background script using chrome.runtime.sendMessage():\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"chrome.runtime.sendMessage({message: \\\"request_data\\\"});\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The background script listens for the message using chrome.runtime.onMessage:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {\\n  if (request.message == \\\"request_data\\\") {\\n    // Process the message and send a response\\n    sendResponse({data: \\\"some_data\\\"});\\n  }\\n});\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The content script receives the response from the background script using a callback function:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"chrome.runtime.sendMessage({message: \\\"request_data\\\"}, function(response) {\\n  console.log(response.data);\\n});\\n\")), mdx(\"p\", null, \"Messaging passing is a powerful tool for building complex Chrome extensions that require different parts of the extension to communicate with each other.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Chrome Extension Permissions List\"), mdx(\"h3\", null, \"A-E\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Permission\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"activeTab\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to interact with the currently active tab in the browser.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"alarms\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to schedule and manage alarms for the browser.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"background\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to run scripts in the background, even when the browser window is closed.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"bookmarks\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to access and manipulate the user's bookmarks.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"browsingData\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to clear the user's browsing data, such as history and cookies.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"clipboardRead\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to read from the system clipboard.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"clipboardWrite\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to write to the system clipboard.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"contentSettings\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to manage content settings, such as JavaScript and cookies, for individual sites.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"contextMenus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to add items to the right-click context menu.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"cookies\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to read and write cookies from websites that the user visits.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"debugger\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to interact with the browser's debugging API.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"declarativeContent\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to modify the behavior of the browser based on certain conditions.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"declarativeNetRequest\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to modify network requests using a declarative ruleset.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"declarativeWebRequest\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to modify network requests using a declarative ruleset.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"desktopCapture\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to capture the user's desktop.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"displaySource\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to capture the user's screen and audio output.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"dns\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to resolve domain names using the DNS resolver of the user's choice.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"downloads\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to manage downloads initiated by the user.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"enterprise.platformKeys\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to use platform-specific cryptographic keys for enterprise authentication.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"experimental\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to use experimental features that are not yet stable.\")))), mdx(\"h3\", null, \"F-O\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Permission\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"fileBrowserHandler\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to handle file selection dialogs.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"fileSystemProvider\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to provide a virtual file system to the browser.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"fontSettings\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to manage font settings for individual sites.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"gcm\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to receive push notifications from Google Cloud Messaging.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"geolocation\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to access the user's location data.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"history\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to access and manipulate the user's browsing history.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"identity\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to access the user's Google identity and profile information.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"idle\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to detect when the user is idle.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"management\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to manage other installed extensions.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"nativeMessaging\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to communicate with native applications installed on the user's computer.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"notifications\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to display notifications to the user.\")))), mdx(\"h3\", null, \"P-Z\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Permission\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"pageCapture\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to capture screenshots of web pages.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"privacy\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to modify privacy settings, such as the browser's Do Not Track setting.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"processes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to manage browser processes.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"proxy\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to manage the browser's proxy settings.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"scripting\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to enable or disable JavaScript for individual sites.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"search\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to modify the browser's default search engine.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"sessions\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to manage the user's browsing sessions.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"storage\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to store and retrieve data in the browser's local storage.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"tabCapture\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to capture the content of browser tabs.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"tabs\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows  an extension to interact with browser tabs, such as opening, closing, and manipulating them.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"topSites\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to access the user's most frequently visited sites.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"tts\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to use text-to-speech synthesis to generate audio output.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ttsEngine\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to register a custom text-to-speech engine.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"unlimitedStorage\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to use unlimited storage space in the browser's local storage.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"videoCapture\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to capture video from the user's camera or screen.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"webNavigation\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to observe and analyze the navigation of web pages.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"webRequest\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to monitor and modify network requests made by the browser.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"webRequestBlocking\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to block network requests made by the browser.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"windows\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows an extension to manage browser windows, such as opening, closing, and resizing them.\")))), mdx(\"h2\", null, \"Resourses\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.chrome.com/docs/extensions/mv3/architecture-overview/\"\n  }, \"https://developer.chrome.com/docs/extensions/mv3/architecture-overview/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://freshman.tech/first-chrome-extension/\"\n  }, \"https://freshman.tech/first-chrome-extension/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Anatomy_of_a_WebExtension\"\n  }, \"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Anatomy_of_a_WebExtension\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.codeinwp.com/blog/how-to-write-a-chrome-extension/#gref\"\n  }, \"https://www.codeinwp.com/blog/how-to-write-a-chrome-extension/#gref\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://medium.com/@jonnykalambay/anatomy-of-a-chrome-extension-54b9dd019825\"\n  }, \"https://medium.com/@jonnykalambay/anatomy-of-a-chrome-extension-54b9dd019825\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.daily.co/blog/the-anatomy-of-a-daily-video-call-chrome-extension/\"\n  }, \"https://www.daily.co/blog/the-anatomy-of-a-daily-video-call-chrome-extension/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://usersnap.com/blog/develop-chrome-extension/\"\n  }, \"https://usersnap.com/blog/develop-chrome-extension/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://blog.logrocket.com/creating-chrome-extension-react-typescript/\"\n  }, \"https://blog.logrocket.com/creating-chrome-extension-react-typescript/\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#chrome-extension-development","title":"Chrome Extension Development","items":[{"url":"#learning-path-for-chrome-extension-development","title":"Learning Path for Chrome extension development"}]},{"url":"#chrome-extension-anatomy","title":"Chrome Extension Anatomy"},{"url":"#chrome-extension-architecture","title":"Chrome Extension Architecture","items":[{"url":"#chrome-extension-anatomy-vs-architecture","title":"Chrome Extension Anatomy VS Architecture"}]},{"url":"#types-of-extension","title":"Types of Extension"},{"url":"#how-chrome-extenstion-works-under-the-hood","title":"How Chrome Extenstion works under the hood"},{"url":"#manifest-file","title":"Manifest File"},{"url":"#popup-page","title":"Popup Page"},{"url":"#background-page","title":"Background Page"},{"url":"#background-script","title":"Background Script"},{"url":"#content-scripts","title":"Content Scripts"},{"url":"#messaging-passing","title":"Messaging Passing"},{"url":"#chrome-extension-permissions-list","title":"Chrome Extension Permissions List","items":[{"url":"#a-e","title":"A-E"},{"url":"#f-o","title":"F-O"},{"url":"#p-z","title":"P-Z"}]},{"url":"#resourses","title":"Resourses"}]},"parent":{"relativePath":"technical-career-path-and-guide/1.chrome-extension-development.md"},"frontmatter":{"metaTitle":"Chrome Extension Development | DevBucket","metaDescription":""}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/web-application-design-principles-and-architecture/1.web-application-development","title":"Web Application Development"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/1.clean-code","title":"Clean Code"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/2.programming-paradigms","title":"Programming Paradigms"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/1.clean-code/learn","title":"Clean Code Daily Read"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/3.object-oriented-programming","title":"Object Oriented Programming"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/4.software-design-principles/1.solid-principles","title":"SOLID Principles"}}},{"node":{"fields":{"slug":"/system-design-and-architecture/1.database-design-and-management","title":"Database Design and Management"}}},{"node":{"fields":{"slug":"/system-design-and-architecture/2.architecture-design-documentation","title":"Architecture Design Documentation"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/html","title":"HTML"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/javascript","title":"JavaScript"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/node-js","title":"NodeJS"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/react-js","title":"ReactJS"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/react-js/reack-hooks","title":"React Hooks"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/go","title":"GO"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/1.complexities-and-notations","title":"Complexities and Notations"}}},{"node":{"fields":{"slug":"/software-design-and-architecture","title":"Software Design and Architecture"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm","title":"Data Structure and Algorithm"}}},{"node":{"fields":{"slug":"/system-design-and-architecture","title":"System Design and Architecture"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/1.strings","title":"Strings"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/2.array","title":"Array"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure","title":"Data Structure"}}},{"node":{"fields":{"slug":"/","title":"DevBucket"}}},{"node":{"fields":{"slug":"/technical-career-path-and-guide","title":" Technical Career Path and Guide"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks","title":"Programming Language"}}},{"node":{"fields":{"slug":"/web-application-design-principles-and-architecture","title":"Web Application Design and Architecture"}}},{"node":{"fields":{"slug":"/web-application-security","title":"Web Application Security"}}},{"node":{"fields":{"slug":"/web-application-security/1.authentication-and-authorization","title":"Authentication and Authorization"}}},{"node":{"fields":{"slug":"/web-application-security/2.web-security-best-practices","title":"Web Security Best Practices"}}},{"node":{"fields":{"slug":"/web-application-security/2.web-security-best-practices/1.developer-security-tips","title":"Developer Security Tips"}}},{"node":{"fields":{"slug":"/web-application-security/1.authentication-and-authorization/1.json-web-tokens","title":"JSON Web Tokens"}}},{"node":{"fields":{"slug":"/technical-career-path-and-guide/1.chrome-extension-development","title":"Chrome Extension Development"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/4.software-design-principles","title":"Software Design Principles"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/sql","title":"SQL"}}}]}},"pageContext":{"id":"f384ff32-f048-531a-9b9f-993ef8c3542a"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}