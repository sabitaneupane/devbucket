{"componentChunkName":"component---src-templates-docs-js","path":"/data-structure-and-algorithm/1.complexities-and-notations","result":{"data":{"site":{"siteMetadata":{"title":"DevBucket","docsLocation":""}},"mdx":{"fields":{"id":"007ce659-eeeb-535d-ada5-ce9beb110357","title":"Complexities and Notations","slug":"/data-structure-and-algorithm/1.complexities-and-notations"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Complexities and Notations\",\n  \"metaTitle\": \"Complexities and Notations | DevBucket\",\n  \"metaDescription\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Algorithm Complexity\"), mdx(\"p\", null, \"Algorithm complexity refers to the measure of how much time and/or space an algorithm requires to solve a problem as the size of the input grows. It is a fundamental concept in computer science and plays a crucial role in determining the efficiency and scalability of algorithms. By analyzing the complexity of an algorithm, developers can make informed decisions about selecting the most appropriate algorithm for a given problem and optimize the performance of their code.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Common algorithm complexities include:\")), mdx(\"p\", null, \"Algorithm complexity refers to the amount of resources an algorithm requires to solve a problem. These resources are usually measured in terms of time and space, which indicate how the time and space requirements of the algorithm grow with the input size. Here are some common types of algorithm complexity:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Time complexity:\"), \" \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The amount of time an algorithm takes to complete as the input size increases. This is often denoted by big O notation, such as O(n), O(n^2), or O(log n). \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Time complexity can be expressed using different terms like constant, logarithmic, linear, quadratic, cubic, or exponential depending on how they grow with the input size.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Space complexity:\"), \" \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The amount of memory an algorithm requires as the input size increases. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Like time complexity, space complexity is also expressed using big O notation, such as O(n), O(n^2), or O(log n).\")))), mdx(\"h2\", null, \"Time Complexity\"), mdx(\"p\", null, \"Time complexity is a measure of the amount of time required to run an algorithm as a function of the input size. It is represented by big O notation (e.g: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(n)\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(n^2)\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(log n)\"), \"), which describes the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"upper bound\"), \" of the running time of the algorithm. Time complexity is crucial when designing and analyzing algorithms as it helps to choose the most efficient algorithm to solve a problem and optimize program performance.\"), mdx(\"p\", null, \"It is not a measurement of how much time it takes to execute a particular algorithm but rather the number of times a particular instruction set is executed. The total time taken depends on external factors such as the compiler used and the processor's speed. Time complexity is a type of computational complexity that describes the time required to execute an algorithm and is highly dependent on the size of the processed data. Understanding time complexity is crucial in designing and analyzing algorithms to optimize program performance.\"), mdx(\"p\", null, \"For example, let's consider a simple algorithm that searches for a specific element in an array of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \" elements. A naive approach to implementing this algorithm is to check each element of the array in order until the target element is found or until the end of the array is reached. The time complexity of this algorithm is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(n)\"), \" because the worst-case scenario is that the target element is at the end of the array, requiring \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \" comparisons.\"), mdx(\"p\", null, \"Now, let's consider a more efficient algorithm, such as binary search. Binary search is a divide-and-conquer algorithm that works by repeatedly dividing the search interval in half until the target element is found. The time complexity of binary search is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(log n)\"), \", which is much faster than the naive approach for large values of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \".\"), mdx(\"p\", null, \"In summary, time complexity is a crucial factor to consider when designing and analyzing algorithms. By understanding the time complexity of an algorithm, we can choose the most efficient algorithm to solve a problem and optimize program performance.\"), mdx(\"h3\", null, \"Types of Time Complexity\"), mdx(\"p\", null, \"The time taken for an algorithm consists of two main components:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Compilation time:\"), \" \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is the time taken by the compiler to convert the program code into machine code that can be executed by the computer. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"While compiling it checks for the syntax and semantic errors in the program and links it with the standard libraries.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The compilation time of a program depends on various factors, such as the size and complexity of the code, the compiler used, and the system specifications. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"However, it is not typically considered in the analysis of algorithmic time complexity, which focuses on the computational resources required to execute an algorithm as a function of the input size.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Run time:\"), \" \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is the time taken by the program to execute on the computer. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Note that run time is calculated for executable statement and not for declaration statements\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is typically expressed in terms of the \\\"Big O\\\" notation, which describes the upper bound of the algorithm's running time as a function of the input size.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The run time depends on the algorithm used, the input size, the efficiency of the implementation, and the hardware resources available.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Runtime complexity is affected by the number of basic operations performed by an algorithm. Basic operations include arithmetic operations, assignments, and comparisons. The number of basic operations performed by an algorithm can vary depending on the input size and the specific algorithm used to solve the problem.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, consider the problem of searching for an element in an array. A linear search algorithm, which checks each element in the array one by one until the target element is found, has a runtime complexity of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n)\"), \", where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \" is the size of the array. On the other hand, a binary search algorithm, which uses a divide-and-conquer approach to search for the element, has a runtime complexity of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(log n)\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In general, algorithms with lower runtime complexities are more efficient and desirable for solving problems. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"However, it's important to note that the actual runtime of an algorithm can vary depending on the specific input and the hardware on which it is executed.\")))), mdx(\"p\", null, \"When discussing time complexity, we typically focus on the run time component, as it is the aspect that is most relevant for analyzing and comparing algorithms.\"), mdx(\"h3\", null, \"Steps to calculate Time Complexity\"), mdx(\"p\", null, \"There are different methods to calculate time complexity, but the most common one is to count the number of operations performed by the algorithm as a function of the input size. Here are the general steps to follow:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Identify the basic operations performed by the algorithm, such as assignments, comparisons, and loops.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Determine how many times each operation is executed based on the size of the input.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Express the total number of operations as a function of the input size, using big O notation to represent the upper bound.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Simplify the function by dropping the lower order terms and constant factors.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Interpret the resulting function as the time complexity of the algorithm.\")), mdx(\"p\", null, \"For example, let's consider the following algorithm that calculates the sum of an array of n numbers:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-Python\"\n  }, \"sum = 0\\nfor i = 0 to n-1\\n   sum = sum + array[i]\\nreturn sum\\n\")), mdx(\"p\", null, \"To calculate the time complexity of this algorithm, we can follow these steps:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The basic operations are the assignment of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sum\"), \", the addition of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"array[i]\"), \" to sum, and the comparison of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n-1\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The assignment of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sum\"), \" is performed only once, so it contributes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(1)\"), \" to the time complexity. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The addition of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"array[i]\"), \" to sum is performed \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \" times, so it contributes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n)\"), \" to the time complexity. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The comparison of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n-1\"), \" is performed \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \" times, so it contributes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n)\"), \" to the time complexity.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The total number of operations is  \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1 + n + n\"), \", which is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2n + 1\"), \". Therefore, the time complexity of the algorithm is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n)\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Since we drop the constant factor and the lower order term, the time complexity can be simplified as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n)\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Interpretation: The time complexity of this algorithm is linear, meaning that it grows in proportion to the input size. This is a relatively efficient algorithm, as its running time is proportional to the size of the input.\")), mdx(\"p\", null, \"Keep in mind that the calculation of time complexity is an approximation and can vary depending on the specific implementation, hardware, and other external factors. However, it is still a useful tool to compare different algorithms and choose the most efficient one for a specific problem.\"), mdx(\"h2\", null, \"Space Complexity\"), mdx(\"p\", null, \"Space complexity is a measure of the amount of memory required by an algorithm as a function of input size. In other words, it is the amount of memory used by an algorithm to solve a problem as the size of the input increases. Space complexity is usually represented by big O notation (e.g: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(n)\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(n^2)\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(log n)\"), \"), which describes the upper bound of the memory usage of the algorithm.\"), mdx(\"p\", null, \"Similar to time complexity, space complexity is an important factor to consider when designing and analyzing algorithms. By understanding the space complexity of an algorithm, we can choose the most efficient algorithm to solve a problem and optimize the memory usage of our programs.\"), mdx(\"p\", null, \"For example, let's consider an algorithm that creates an array of n elements and then iterates over the array to perform some computation. The space complexity of this algorithm is O(n), as it requires storing an array of n elements in memory. On the other hand, an algorithm that operates on the input data without creating an array may have a lower space complexity.\"), mdx(\"p\", null, \"It's important to note that space complexity and time complexity are not always directly correlated. An algorithm with a low space complexity may have a high time complexity and vice versa. Therefore, it's important to consider both time and space complexity when analyzing and optimizing algorithms.\"), mdx(\"h3\", null, \"Steps to calculate Space Complexity\"), mdx(\"p\", null, \"To calculate the space complexity of an algorithm, we need to consider the additional space used by the algorithm in addition to the input size. This additional space can come from variables, data structures, and other factors that are used by the algorithm during its execution.\"), mdx(\"p\", null, \"Here are the steps to calculate the space complexity of an algorithm:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Identify the additional space used by the algorithm in addition to the input size. This can include variables, data structures, and any other space used during the execution of the algorithm.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Express the additional space used by the algorithm as a function of the input size.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Simplify the function to identify the highest-order term. This term will represent the space complexity of the algorithm.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Represent the space complexity using big O notation.\")), mdx(\"p\", null, \"For example, let's consider the following algorithm that sums the elements in an array of size n:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-Python\"\n  }, \"function sumArray(array):\\n    sum = 0\\n    for i in range(n):\\n        sum += array[i]\\n    return sum\\n\")), mdx(\"p\", null, \"To calculate the space complexity of this algorithm, we need to consider the additional space used by the algorithm, which is the space used by the sum variable. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Since this variable is a single integer, its space requirement is constant and does not depend on the size of the input array. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Therefore, the space complexity of this algorithm is O(1).\")), mdx(\"p\", null, \"In summary, calculating the space complexity of an algorithm involves identifying the additional space used by the algorithm and expressing it as a function of the input size, then simplifying the function to identify the highest-order term and representing the space complexity using big O notation.\"), mdx(\"h3\", null, \"Time vs space complexity\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Factor\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Time Complexity\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Space Complexity\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Definition\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Measure of amount of time taken by an algorithm to run as a function of input size.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Measure of amount of memory taken by an algorithm to run as a function of input size.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Representation\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Big O notation\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Big O notation\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Depends on\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Operation, Comparision, Loop Stuff, Pointer refences, Function calls to outside\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Variables, Data Structures, Allocations, Function call\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"What it measures\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Number of operations or steps required to complete an algorithm as input size increases.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Amount of memory required to store all the variables, data structures, and intermediate values as input size increases.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Importance\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Determines the efficiency of an algorithm and helps to choose the most optimal algorithm to solve a problem.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Determines how much memory an algorithm needs to operate and whether the algorithm can run on a given system.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Examples\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"O(n), O(log n), O(n^2), O(1), etc.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"O(n), O(log n), O(n^2), O(1), etc.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Calculation\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Based on the number of operations in the algorithm\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Based on the amount of memory required to store variables, data structures, and intermediate values in the algorithm.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Trade-offs\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Increasing time complexity may lead to decreased space complexity, and vice versa.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Increasing space complexity may lead to decreased time complexity, and vice versa.\")))), mdx(\"h2\", null, \"Complexity Classes\"), mdx(\"p\", null, \"Common complexity classes are a set of categories used to classify algorithms based on their time and space complexity. \"), mdx(\"p\", null, \"Complexity classes, ordered from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"fastest to slowest\"), \" are:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Complexity\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Notation\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Constant time\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(O(1))\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Logarithmic time\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(O(log n))\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Linear time\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(O(n))\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Log-linear\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"O(nlog(n))\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Quadratic time\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(O(n^2))\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Polynomial time\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(O(n^c))\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Cubic Complexity\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"O(n^3)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Exponential time\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(O(c^n))\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Factorial time\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(O(n!))\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Constant time (O(1)):\"), \" \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Constant time \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(O(1))\"), \" refers to algorithms that require a fixed amount of time to complete, regardless of the size of the input data. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This time complexity is achieved when an algorithm undergoes a constant number of steps, such as 1, 5, or 10, to solve a given problem. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An example of an algorithm with constant time complexity is accessing an element of an array by index. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This means that the count of operations remains the same, independent of the size of the input data. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Similarly, an algorithm has a constant space complexity if it uses the same amount of memory space regardless of the input size. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For instance, a function that returns a single value and does not use any additional data structures has a constant space complexity.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Logarithmic time (O(log n)):\"), \"  \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Logarithmic time \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(O(log n))\"), \" is a time complexity category for algorithms that take an increasing but logarithmic amount of time to complete as the input size grows. \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This time complexity indicates that the time required to complete the algorithm increases logarithmically with the input size. \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Binary search is an example of an algorithm that exhibits a logarithmic time complexity. Such algorithms typically require \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"log(N)\"), \" steps to perform operations on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"N\"), \" elements, and the logarithmic base is often taken as 2. \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For instance, for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"N = 1,000,000\"), \", an algorithm with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(log(N))\"), \" time complexity would require about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"20\"), \" steps, with constant precision. \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The logarithmic base is often omitted since it does not necessarily affect the order of operation count. \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Additionally, an algorithm has logarithmic space complexity if the amount of memory required grows logarithmically with the input size. \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For instance, a binary search algorithm that divides the input in half at each step has a logarithmic space complexity.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A mathematical concept that's widely used in Computer Science and that's defined by the following equation:\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"log\", mdx(\"sub\", null, \"b\"), \"(x) = y if and only if b\", mdx(\"sup\", null, \"y\"), \" = x\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In the context of coding interviews, the logarithm is used to describe the complexity analysis of algorithms, and its usage always implies a logarithm of base \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"2\"), \". In other words, the logarithm used in the context of coding interviews is defined by the following equation:\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"log(n) = y if and only if 2\", mdx(\"sup\", null, \"y\"), \" = n\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In plain English, if an algorithm has a logarithmic time complexity (O(log(n)), where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \" is the size of the input), then whenever the algorithm's input doubles in size (i.e., whenever \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \" doubles), the number of operations needed to complete the algorithm only increases by one unit. Conversely, an algorithm with a linear time complexity would see its number of operations double if its input size doubled.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u220FAs an example, a linear-time-complexity algorithm with an input of size 1,000 might take roughly 1,000 operations to complete, whereas a logarithmic-time-complexity algorithm with the same input would take roughly 10 operations to complete, since 2\", mdx(\"sup\", null, \"10\"), \" ~= 1,000.\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Linear time (O(n)):\"), \" \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linear time \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(O(n))\"), \" is a time complexity category for algorithms that take an amount of time proportional to the input size to complete. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This time complexity indicates that the time required to complete the algorithm increases linearly with the input size. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An example of an algorithm with a linear time complexity is iterating through an array. In linear time complexity, the number of steps required to implement an operation on \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N\"), \" elements is proportional to the total number of elements. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For instance, if there are \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"500\"), \" elements, it will take approximately \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"500\"), \" steps. The number of steps for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N\"), \" elements can be\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \" N/2\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"3N\"), \", among others. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linear time complexity also imposes a runtime of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(nlog(n))\"), \", undergoing the execution of the order \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N*log(N)\"), \" on \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N\"), \" elements to solve a given problem. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For instance, for a given \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1000\"), \" elements, the linear complexity would execute \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"10,000\"), \" steps to solve a problem. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An algorithm has a linear space complexity if the amount of memory required increases linearly with the input size. Storing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \" elements in an array has a linear space complexity.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Log-linear: O(nlog(n)):\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Log-linear time complexity, denoted as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(nlog(n))\"), \", is a category of algorithms that take longer to complete as the input size increases, but not as long as quadratic or exponential time algorithms. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is a combination of linear and logarithmic time complexities, where the time required to complete the algorithm increases proportionally to the input size and the logarithm of the input size. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Examples of algorithms with log-linear time complexity include merge sort and heap sort. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In merge sort, the input array is divided into two halves recursively until they are of size \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1\"), \", and then they are merged back together. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The time complexity of merge sort is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(nlog(n))\"), \", as each half of the array is sorted recursively with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"log(n)\"), \" operations, and merging the two halves takes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \" operations.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Similarly, heap sort builds a binary heap of the input array, which takes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n)\"), \" time, and then repeatedly extracts the maximum element from the heap, which takes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"log(n)\"), \" operations, until the array is sorted. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The overall time complexity of heap sort is also \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(nlog(n))\"), \". \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Log-linear time complexity is commonly used in sorting algorithms, and its performance is considered efficient for large input sizes. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"However, it is still slower than constant, logarithmic, or linear time complexity algorithms.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Quadratic time (O(n^2)):\"), \" \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Algorithms that take time proportional to the square of the input size to run. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An algorithm has a quadratic time complexity if the time required to complete the algorithm increases quadratically with the input size. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, nested loops iterating over an array have a quadratic time complexity. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A quadratic time complexity, denoted by \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n^2)\"), \", implies that an algorithm will perform the order of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n^2\"), \" operations on n input elements to solve a given problem. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For instance, for an input size of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N=100\"), \", it would require \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"10,000\"), \" steps. Quadratic complexity arises whenever the order of operation has a quadratic relationship with the input size. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N\"), \" input elements, the number of steps may be in the order of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"3N^2/2\"), \". \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An algorithm has a quadratic space complexity if the amount of memory space required increases quadratically with the input size. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, storing a two-dimensional matrix of size \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n x n\"), \" has a quadratic space complexity.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Polynomial time (O(n^c)):\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Polynomial time algorithms are algorithms whose running time increases as a polynomial function of the input size, where the degree of the polynomial is a constant, denoted by \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"c\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This means that for a problem of size \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \", the number of operations required to solve it is proportional to n raised to the power of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"c\"), \", where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"c\"), \" is a constant. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, an algorithm that takes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n^3)\"), \" time to run is a polynomial time algorithm, where the running time increases as a cubic function of the input size. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Polynomial time algorithms are generally considered efficient because their running time grows at a relatively slow rate as the input size increases. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"However, as the degree of the polynomial increases, the running time can still become impractical for large input sizes. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Examples of polynomial time algorithms include various sorting algorithms such as merge sort and quicksort, as well as algorithms for polynomial interpolation, polynomial regression, and matrix multiplication\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Cubic Complexity (O(n^3)):\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cubic complexity is a type of time complexity in computer science that refers to algorithms that take time proportional to the cube of the input size to run. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It has a complexity of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n^3)\"), \", where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \" is the input size. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This means that for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N\"), \" input data size, it will execute the order of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N^3\"), \" steps on \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N\"), \" elements to solve a given problem. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, if there are \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"100\"), \" elements, it will execute \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1,000,000\"), \" steps. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An example of an algorithm with cubic complexity is a nested loop iterating over a three-dimensional array. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cubic complexity is a relatively slow time complexity and can be problematic for large inputs.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Exponential time (O(c^n)):\"), \" \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"These are algorithms that take an amount of time proportional to an exponential function of the input size to run, where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"c\"), \" is a constant. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An algorithm has an exponential time complexity if the time it takes to complete the algorithm increases exponentially with the input size. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, the recursive Fibonacci sequence algorithm has an exponential time complexity. The exponential time complexity is denoted by \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(2^n)\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n!)\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n^k)\"), \", and so on. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It means that the number of operations required to solve a problem is exponentially dependent on the size of the input data. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, if the input size is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N=10\"), \", then the exponential function \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2^N\"), \" will result in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1024\"), \". Similarly, if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N=20\"), \", it will result in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1048576\"), \", and if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N=100\"), \", it will result in a number having \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"30\"), \" digits. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The factorial function \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N!\"), \" grows even faster; for example, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N=5\"), \" will result in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"120\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N=10\"), \" will result in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"3,628,800\"), \". \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The space complexity of an algorithm can also be measured using similar notations like \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(1)\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n)\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n^2)\"), \", etc. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An algorithm has an exponential space complexity if the amount of memory space required increases exponentially with the input size. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, a recursive algorithm that generates all subsets of a set has an exponential space complexity.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Factorial time (O(n!)):\"), \" \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Factorial time complexity refers to algorithms that take time proportional to the factorial of the input size to run. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An algorithm has a factorial time complexity if the time required to complete the algorithm increases factorially with the input size. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This means that as the input size increases, the time required to solve the problem grows at an incredibly rapid pace. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is the slowest time complexity and is usually avoided in practice. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Since the constants do not hold a significant effect on the order of count of operation, so it is better to ignore them. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Thus, to consider an algorithm to be linear and equally efficient, it must undergo \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N/2\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"3*N\"), \" count of operation, respectively, on the same number of elements to solve a particular problem.\")))), mdx(\"h2\", null, \"Asymptotic Analysis\"), mdx(\"p\", null, \"Asymptotic analysis is the study of the performance of an algorithm in the limit as the input size goes to infinity. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The three main types of asymptotic analysis are:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Worst-case complexity:\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The worst-case complexity is the maximum amount of time an algorithm can take to complete for any possible input of size \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \". \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is the upper bound on the running time of the algorithm. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In other words, it describes the scenario in which the algorithm performs the most amount of work.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is an important measure of an algorithm's efficiency as it provides a guarantee that the algorithm will never take more time or space than the worst-case complexity for any input size.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An example of worst-case complexity can be demonstrated through a linear search algorithm. In the worst-case scenario, the target element is not present in the list, and we have to compare it with all the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \" elements of the list before determining that it is not present. In this case, the time complexity of the linear search algorithm would be \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n)\"), \", as the algorithm has to examine every element in the list.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, let's say we have a list of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"10,000\"), \" elements and we are searching for an element that is not present in the list. In this worst-case scenario, the linear search algorithm will have to compare the target element with all \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"10,000\"), \" elements before concluding that it is not present. This is the worst-case complexity of the linear search algorithm.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Average-case complexity:\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The average-case complexity is the expected amount of time an algorithm takes to complete for all possible inputs of size n, assuming a probability distribution for the input. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is a more realistic measure of an algorithm's performance than the worst-case complexity, as it takes into account the likelihood of different inputs.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To calculate the average-case complexity of an algorithm, you typically need to make assumptions about the probability distribution of inputs. For example, if you're analyzing an algorithm that sorts an array, you might assume that all permutations of the array are equally likely to occur as input. You would then calculate the average number of comparisons or swaps required by the algorithm across all possible inputs, weighted by their probabilities.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An example of average-case complexity can be illustrated with quicksort algorithm. Quicksort has an average-case time complexity of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n*log n)\"), \", which means that the time required to sort an array of size \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \" is proportional to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \" times the logarithm of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In the average case, the quicksort algorithm performs reasonably well, as it partitions the array into two sub-arrays and recursively sorts them. However, if the input array is already sorted or contains many duplicate elements, the quicksort algorithm may perform poorly, resulting in a worst-case time complexity of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n^2)\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Therefore, in the average case, quicksort's time complexity is faster than its worst-case complexity but slower than its best-case complexi\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Best-case complexity:\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The best-case complexity is the minimum amount of time an algorithm can take to complete for any possible input of size \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \". \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is the lower bound on the running time of the algorithm.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is the scenario where the input is already in the desired state, and the algorithm requires the least possible amount of time or space to process it.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"However, the best-case complexity is not always a good indicator of the algorithm's overall performance since the best-case scenario may occur rarely or not at all in real-world situations. Therefore, the focus is usually on the average-case or worst-case complexity to analyze the algorithm's performance.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An example of the best-case complexity is when an algorithm has to perform only one operation to solve the problem. For instance, consider an algorithm that searches for a specific element in an array, and the target element is the first element in the array. In this case, the algorithm will only need to perform one operation, which is to check if the first element is the target element. Therefore, the best-case time complexity of this algorithm is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(1)\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"However, the worst-case time complexity of this algorithm is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n)\"), \", where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \" is the number of elements in the array, if the target element is not present in the array.\")))), mdx(\"p\", null, \"In summary, worst-case complexity is a measure of the algorithm's upper bound, while average-case complexity is a measure of its expected performance, and best-case complexity is a measure of its lower bound.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Complexity Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Definition\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Example\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Measurement of\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Worst-case complexity\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The maximum time or space required by an algorithm for any input of size n\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Searching for an element that is not in a sorted list using linear search; the worst case is when the element is not in the list and we have to search through all n elements\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"It is a measure of the upper bound of an algorithm's performance.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Average-case complexity\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The expected time or space required by an algorithm for a random input of size n\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Quicksort, where the average case occurs when the pivot divides the list into two roughly equal-sized sublists\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"It is a measure of the upper bound of an algorithm's performance.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Best-case complexity\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The minimum time or space required by an algorithm for any input of size n\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Searching for the first element in an unsorted list; the best case is when the element is the first element in the list, requiring only one comparison\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"It is a measure of the lower bound of an algorithm's performance.\")))), mdx(\"h2\", null, \"Asymptotic Notation\"), mdx(\"p\", null, \"Asymptotic analysis is a technique used to analyze the performance of an algorithm as the input size grows towards infinity. It is a mathematical approach that helps in measuring the time and space complexity of an algorithm.\"), mdx(\"p\", null, \"The basic idea behind asymptotic analysis is to represent the time or space taken by an algorithm in terms of its input size. It provides an upper bound on the running time of the algorithm for a given input size, which is expressed using big O notation.\"), mdx(\"p\", null, \"Asymptotic analysis considers the order of growth of the algorithm as the input size increases. The order of growth refers to the rate at which the running time or space required by the algorithm grows with the increase in the input size. The most common orders of growth are constant time (O(1)), logarithmic time (O(log n)), linear time (O(n)), quadratic time (O(n^2)), and exponential time (O(2^n)).\"), mdx(\"p\", null, \"Asymptotic analysis allows us to compare the performance of different algorithms by analyzing their time and space complexities. For example, an algorithm with a time complexity of O(n) will be more efficient than an algorithm with a time complexity of O(n^2) for large input sizes.\"), mdx(\"p\", null, \"Overall, asymptotic analysis is an important tool in algorithm analysis and helps in designing efficient algorithms.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Types of asymptotic Notation:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Big-O Notation (\\u039F):\"), \" \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Big-O notation, also known as order notation, is a type of asymptotic notation commonly used in computer science to describe the upper bound of the time complexity of an algorithm. It gives an idea of the worst-case scenario for the time or space complexity of an algorithm as the input size increases.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For instance, if an algorithm has a time complexity of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n)\"), \", it means that the running time of the algorithm will increase linearly with the input size. If the input size doubles, the running time will also double. The notation \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n)\"), \" defines the upper bound of the growth rate of an algorithm's running time with respect to input size \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \", meaning that the actual running time will never exceed \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"O(n)\"), \" as n grows larger.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Big-O notation is a useful tool to compare the performance of different algorithms and to describe how well an algorithm scales as the input size increases. It is read as \\\"order of n\\\" or \\\"big O of n,\\\" where n represents the input size.\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Omega Notation (\\u03A9):\"), \" \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Omega notation (\\u03A9) is a mathematical notation used in computer science to describe the lower bound of the running time of an algorithm. It represents the best-case scenario or the minimum amount of time required to solve a problem. It is the opposite of the Big-O notation (O), which represents the upper bound or worst-case scenario of the algorithm's running time.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In simple terms, if an algorithm has a lower bound of \\u03A9(n), it means that the best-case scenario for the running time of the algorithm will be at least n. For example, if we have an algorithm that searches for an element in a sorted list, the best-case scenario would be that the element is found at the first position of the list, and in this case, the algorithm's running time would be constant, i.e., \\u03A9(1).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Omega notation is useful in determining the best-case scenario of an algorithm, as it helps to find the lower bound of the running time. It is often used in conjunction with Big-O notation to provide both the upper and lower bounds of an algorithm's running time, giving a more complete picture of its performance.\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Theta Notation (\\u03B8):\"), \" \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Theta notation (\\u03B8) is a mathematical notation used in computer science to describe the tight bound of an algorithm's time complexity. It represents both the upper and lower bounds of the growth rate of a function and gives an idea of the exact tightest bound for the time or space complexity of an algorithm.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In other words, if a function f(n) is said to be \\u03B8(g(n)), it means that f(n) grows at the same rate as g(n) up to a constant factor. This notation is useful when we want to describe the exact behavior of an algorithm's time complexity, as it provides an upper and lower bound.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For instance, if the time complexity of an algorithm is \\u03B8(n), it means that the algorithm's best-case and worst-case scenarios will take at least and at most n time, respectively. This notation provides a more complete and accurate picture of an algorithm's time complexity when used alongside Big-O and Omega notation.\")))), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Notation\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Definition\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Example\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Big-O (O)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Represents the upper bound of the growth rate of a function.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"If the time complexity of an algorithm is O(n), it means that the worst-case scenario will take at most n time.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Omega (\\u03A9)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Represents the lower bound of the growth rate of a function.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"If the time complexity of an algorithm is \\u03A9(n), it means that the best-case scenario will take at least n time.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Theta (\\u03B8)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Represents both the upper and lower bounds of the growth rate of a function.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"If the time complexity of an algorithm is \\u03B8(n), it means that the best-case and worst-case scenarios will take at most and at least n time, respectively.\")))), mdx(\"h2\", null, \"Standard Analysis technique\"), mdx(\"p\", null, \"The process of standard analysis technique involves the analysis of an algorithm's time and space complexity by breaking it down into individual operations and determining the number of times each operation is executed. The following methods are commonly used in standard analysis technique:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Constant time statements:\"), \" These statements have a fixed execution time, such as arithmetic operations, variable assignments, and accessing elements of an array, regardless of the input size. The time complexity of such statements is O(1).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Analyzing loops:\"), \" The time complexity of a loop is based on the number of iterations it performs, which is usually related to the input size. For example, a for loop that iterates n times has a time complexity of O(n).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Analyzing nested loops:\"), \" When loops are nested, the time complexity can become more complex, often resulting in O(n^2) or higher time complexity in some cases.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Analyzing a sequence of statements:\"), \" The time complexities of multiple statements executed in sequence are added together. For instance, executing statement A with a time complexity of O(n) followed by statement B with O(log n) results in a time complexity of O(n + log n), which simplifies to O(n).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Analyzing conditional statements:\"), \" The time complexity of a conditional statement such as an if statement depends on the complexity of the code inside the statement, as well as the probability of the condition being true. The time complexity will be the same as that of the code inside the statement if the probability is close to 1, and negligible if it is close to 0.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Counting the basic operations:\"), \" This involves counting the number of basic operations performed by the algorithm, such as arithmetic operations, comparisons, and assignments.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Using mathematical formulas:\"), \" In some cases, the time and space complexity of an algorithm can be expressed using mathematical formulas, which can be used to estimate its time and space requirements.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Asymptotic analysis:\"), \" Asymptotic analysis is a technique for analyzing the behavior of an algorithm as the input size grows to infinity. It involves estimating the upper and lower bounds on the algorithm's time and space complexity using big-O, big-Omega, and big-Theta notations.\")), mdx(\"p\", null, \"By using these techniques, the standard analysis technique estimates an algorithm's time and space complexity and determines its suitability for a given application or problem size. It can use various methods, such as counting basic operations, using mathematical formulas to estimate time and space complexity, or asymptotic analysis, which estimates the upper and lower bounds on the algorithm's time and space complexity using big-O, big-Omega, and big-Theta notations.\"), mdx(\"h2\", null, \"Recurrence relations\"), mdx(\"p\", null, \"In computer science and mathematics, a recurrence relation is an equation that recursively defines a sequence or sequence of functions. Recurrence relations are often used to analyze the time complexity of algorithms or the behavior of recursive functions.\"), mdx(\"p\", null, \"In the context of algorithm analysis, a recurrence relation is used to describe the running time of an algorithm in terms of the size of its input. Typically, a recurrence relation will express the running time of an algorithm on an input of size n in terms of the running time of the algorithm on smaller inputs. Solving the recurrence relation then involves finding a closed-form expression for the running time of the algorithm on an input of size n.\"), mdx(\"p\", null, \"There are various techniques for solving recurrence relations, including substitution, recurrence tree, and master theorem. Solving recurrence relations can help us determine the time complexity of algorithms, which is crucial in analyzing the efficiency of algorithms and comparing different algorithms for the same problem.\"), mdx(\"p\", null, \"There are several methods to solve recurrence relations, including:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Substitution method:\"), \" \"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  The substitution method is one of the methods used to solve recurrence relations. In this method, we guess a solution for the recurrence relation and then prove it by induction.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Here are the steps to solve a recurrence relation using the substitution method:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Guess the form of the solution.\\nUse mathematical induction to prove that the guess is correct.\\nLet's take an example to understand how the substitution method works. Suppose we have a recurrence relation:\\n\\nT(n) = 2T(n/2) + n, where T(1) = 1\\n\\nTo solve this recurrence relation using the substitution method, we will follow the steps:\\n\\nGuess the form of the solution:\\nWe can guess that the solution is T(n) = O(nlogn).\\n\\nProve that the guess is correct using mathematical induction:\\nBase case: T(1) = 1, which satisfies the guess.\\n\\nInductive step: Assume that T(k) <= cklogk for all k < n, where c is some constant.\\n\\nWe have:\\nT(n) = 2T(n/2) + n\\n<= 2cn/2 * log(n/2) + n\\n= cnlogn - cnlog2 + n\\n= cnlogn - cn + n\\n<= cnlogn\\n\\nThe last inequality holds if we choose c >= 1 and n > 1.\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Hence, by mathematical induction, we have proved that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T(n) = O(nlogn)\"), \" is a valid solution to the given recurrence relation.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Therefore, the solution to the recurrence relation \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T(n) = 2T(n/2) + n\"), \", where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T(1) = 1, is T(n) = O(nlogn)\"), \".\"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Iteration method:\"), \" \"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  This involves iteratively plugging in the recurrence relation into itself and simplifying until a pattern emerges.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  The iteration method is another technique used to solve recurrence relations. It involves repeatedly substituting the previous value into the original equation until a pattern or closed-form solution emerges. The iteration method is particularly useful when the substitution method fails or becomes too complex.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Here is an example of how to solve a recurrence relation using the iteration method:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Consider the recurrence relation: T(n) = T(n-1) + 3n, where T(1) = 1.\\n\\nWe want to find a closed-form solution for T(n).\\n\\nTo use the iteration method, we start by computing the first few terms of the sequence:\\n\\nT(1) = 1\\nT(2) = T(1) + 3(2) = 7\\nT(3) = T(2) + 3(3) = 16\\nT(4) = T(3) + 3(4) = 28\\n\\nWe notice that the sequence appears to be a quadratic polynomial of the form T(n) = an^2 + bn + c. To find the coefficients a, b, and c, we use the initial condition T(1) = 1:\\n\\nT(1) = a(1)^2 + b(1) + c = 1\\na + b + c = 1\\n\\nWe also use the recurrence relation to obtain two more equations:\\n\\nT(2) = a(2)^2 + b(2) + c = 7\\n4a + 2b + c = 7\\n\\nT(3) = a(3)^2 + b(3) + c = 16\\n9a + 3b + c = 16\\n\\nWe can now solve these three equations simultaneously to find the values of a, b, and c. Solving the equations yields:\\n\\na = 1\\nb = -1\\nc = 1\\n\\nTherefore, the closed-form solution for the recurrence relation T(n) = T(n-1) + 3n, where T(1) = 1, is T(n) = n^2 - n + 1.\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Master theorem:\"), \" \"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  This is a formula that gives a solution to recurrence relations of the form \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T(n) = aT(n/b) + f(n)\"), \", where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a \\u2265 1\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b > 1\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"f(n)\"), \" is a given function.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  The Master theorem is a formula for solving divide-and-conquer recurrence relations. It provides a way to find a closed-form solution for a recurrence relation by identifying its complexity using three cases. The theorem is often used in the analysis of algorithms to determine their time complexity.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"The theorem states that if a recurrence relation of the form:\\n\\nT(n) = aT(n/b) + f(n)\\n\\nwhere a is the number of subproblems, each of size n/b, and f(n) is the time complexity of the divide-and-conquer step, then the time complexity T(n) can be expressed as:\\n\\nIf f(n) = O(n^log_b a-\\u03F5), then T(n) = \\u0398(n^log_b a)\\n\\nIf f(n) = \\u0398(n^log_b a), then T(n) = \\u0398(n^log_b a * log n)\\n\\nIf f(n) = \\u03A9(n^log_b a+\\u03F5), and if a * f(n/b) \\u2264 c * f(n) for some constant c < 1 and sufficiently large n, then T(n) = \\u0398(f(n))\\n\\nHere, \\u03F5 is a small positive constant and log_b a represents the logarithm of a to the base b.\\n\\nLet's consider an example: T(n) = 2T(n/2) + n.\\n\\nHere, a = 2, b = 2 and f(n) = n.\\n\\nUsing the Master theorem, we can determine the time complexity of this recurrence relation as follows:\\n\\nlog_b a = log_2 2 = 1\\n\\nCase 2 applies because f(n) = \\u0398(n^log_b a).\\n\\nTherefore, T(n) = \\u0398(n^log_b a * log n) = \\u0398(n log n).\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Hence, the time complexity of the algorithm is O(n log n).\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Generating functions:\"), \" \"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  This involves representing the sequence of numbers generated by the recurrence relation as a power series, and then manipulating this series to obtain a closed-form solution.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Generating functions are mathematical tools used to represent sequences of numbers as power series. They provide a powerful way to study and manipulate sequences of numbers and are widely used in combinatorics, number theory, and other areas of mathematics.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  The basic idea behind generating functions is to encode the sequence of numbers into a polynomial or power series. \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"The generating function for a sequence {an} is defined as:\\n\\nG(x) = a0 + a1x + a2x^2 + a3x^3 + ...\\n\\nFor example, the generating function for the sequence {1, 1, 2, 3, 5, 8, 13, ...} (the Fibonacci sequence) is:\\n\\nG(x) = 1 + x + 2x^2 + 3x^3 + 5x^4 + 8x^5 + 13x^6 + ...\\n\\nGenerating functions can be used to solve a variety of problems, including counting problems and recurrence relations. The following is an example of how generating functions can be used to solve a counting problem:\\n\\nExample: How many ways are there to roll a sum of 7 with two dice?\\n\\nSolution: We can represent the sum of two dice rolls as the coefficients of the generating function:\\n\\nG(x) = (x + x^2 + x^3 + x^4 + x^5 + x^6)^2\\n\\nExpanding this out gives:\\n\\nG(x) = x^2 + 2x^3 + 3x^4 + 4x^5 + 5x^6 + 6x^7 + 5x^8 + 4x^9 + 3x^10 + 2x^11 + x^12\\n\\nThe coefficient of x^7 is 6, which means there are 6 ways to roll a sum of 7 with two dice.\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Generating functions can also be used to solve recurrence relations, as demonstrated by the master theorem. Overall, generating functions provide a powerful and versatile tool for solving a wide range of mathematical problems.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Recursion trees:\"), \" \"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  This involves drawing a tree-like diagram to visualize the recursion involved in the recurrence relation, and then computing the total work done by summing the work done at each level of the tree.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Recursion trees are a graphical representation of the recursive function calls that occur in a recursive algorithm. Each node in the tree represents the cost of a single subproblem, and the branches represent the subproblems created by that node.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  To analyze the time complexity of the recursive algorithm, we sum the costs of all nodes in the tree, which gives us the total cost of the algorithm.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  For example, consider the following recursive function that calculates the nth Fibonacci number:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"function fibonacci(n):\\n    if n <= 1:\\n        return n\\n    else:\\n        return fibonacci(n-1) + fibonacci(n-2)\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  To construct the recursion tree for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fibonacci(5)\"), \", we start with the root node representing the cost of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fibonacci(5)\"), \" call, which is equal to the sum of the costs of its two child nodes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fibonacci(4)\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fibonacci(3\"), \"). We then continue constructing the tree by recursively adding nodes until we reach the base case, which are the nodes with no children.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"  The resulting recursion tree for fibonacci(5) looks like this:\\n\\n              fibonacci(5)\\n              /          \\\\\\n    fibonacci(4)       fibonacci(3)\\n    /        \\\\          /        \\\\\\nfibonacci(3) fibonacci(2) fibonacci(2) fibonacci(1)\\n  /    \\\\\\nfibonacci(2) fibonacci(1)\\n\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  To calculate the time complexity of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fibonacci(5)\"), \", we sum the costs of all the nodes in the tree, which is equal to 15. Therefore, the time complexity of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fibonacci(5)\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(15)\"), \", which simplifies to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(2^n)\"), \".\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Recursion trees can be used to analyze the time complexity of many recursive algorithms and can help in understanding the behavior of the algorithm as the input size increases.\"))), mdx(\"h2\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.geeksforgeeks.org/time-complexities-of-different-data-structures/\"\n  }, \"https://www.geeksforgeeks.org/time-complexities-of-different-data-structures/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://devopedia.org/algorithmic-complexity\"\n  }, \"https://devopedia.org/algorithmic-complexity\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.javatpoint.com/daa-analyzing-algorithm-control-structure\"\n  }, \"https://www.javatpoint.com/daa-analyzing-algorithm-control-structure\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.javatpoint.com/daa-recurrence-relation\"\n  }, \"https://www.javatpoint.com/daa-recurrence-relation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=xLetJpcjHS0&list=PLBlnK6fEyqRj9lld8sWIUNwlKfdUoPd1Y\"\n  }, \"https://www.youtube.com/watch?v=xLetJpcjHS0&list=PLBlnK6fEyqRj9lld8sWIUNwlKfdUoPd1Y\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#algorithm-complexity","title":"Algorithm Complexity"},{"url":"#time-complexity","title":"Time Complexity","items":[{"url":"#types-of-time-complexity","title":"Types of Time Complexity"},{"url":"#steps-to-calculate-time-complexity","title":"Steps to calculate Time Complexity"}]},{"url":"#space-complexity","title":"Space Complexity","items":[{"url":"#steps-to-calculate-space-complexity","title":"Steps to calculate Space Complexity"},{"url":"#time-vs-space-complexity","title":"Time vs space complexity"}]},{"url":"#complexity-classes","title":"Complexity Classes"},{"url":"#asymptotic-analysis","title":"Asymptotic Analysis"},{"url":"#asymptotic-notation","title":"Asymptotic Notation"},{"url":"#standard-analysis-technique","title":"Standard Analysis technique"},{"url":"#recurrence-relations","title":"Recurrence relations"},{"url":"#resources","title":"Resources"}]},"parent":{"relativePath":"data-structure-and-algorithm/1.complexities-and-notations.md"},"frontmatter":{"metaTitle":"Complexities and Notations | DevBucket","metaDescription":""}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/web-application-design-principles-and-architecture/1.web-application-development","title":"Web Application Development"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/1.clean-code","title":"Clean Code"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/2.programming-paradigms","title":"Programming Paradigms"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/1.clean-code/learn","title":"Clean Code Daily Read"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/3.object-oriented-programming","title":"Object Oriented Programming"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/4.software-design-principles/1.solid-principles","title":"SOLID Principles"}}},{"node":{"fields":{"slug":"/system-design-and-architecture/1.database-design-and-management","title":"Database Design and Management"}}},{"node":{"fields":{"slug":"/system-design-and-architecture/2.architecture-design-documentation","title":"Architecture Design Documentation"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/html","title":"HTML"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/javascript","title":"JavaScript"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/node-js","title":"NodeJS"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/react-js","title":"ReactJS"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/react-js/reack-hooks","title":"React Hooks"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/go","title":"GO"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/1.complexities-and-notations","title":"Complexities and Notations"}}},{"node":{"fields":{"slug":"/software-design-and-architecture","title":"Software Design and Architecture"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm","title":"Data Structure and Algorithm"}}},{"node":{"fields":{"slug":"/system-design-and-architecture","title":"System Design and Architecture"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/1.strings","title":"Strings"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/2.array","title":"Array"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure","title":"Data Structure"}}},{"node":{"fields":{"slug":"/","title":"DevBucket"}}},{"node":{"fields":{"slug":"/technical-career-path-and-guide","title":" Technical Career Path and Guide"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks","title":"Programming Language"}}},{"node":{"fields":{"slug":"/web-application-design-principles-and-architecture","title":"Web Application Design and Architecture"}}},{"node":{"fields":{"slug":"/web-application-security","title":"Web Application Security"}}},{"node":{"fields":{"slug":"/web-application-security/1.authentication-and-authorization","title":"Authentication and Authorization"}}},{"node":{"fields":{"slug":"/web-application-security/2.web-security-best-practices","title":"Web Security Best Practices"}}},{"node":{"fields":{"slug":"/web-application-security/2.web-security-best-practices/1.developer-security-tips","title":"Developer Security Tips"}}},{"node":{"fields":{"slug":"/web-application-security/1.authentication-and-authorization/1.json-web-tokens","title":"JSON Web Tokens"}}},{"node":{"fields":{"slug":"/technical-career-path-and-guide/1.chrome-extension-development","title":"Chrome Extension Development"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/4.software-design-principles","title":"Software Design Principles"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/sql","title":"SQL"}}}]}},"pageContext":{"id":"007ce659-eeeb-535d-ada5-ce9beb110357"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}