{"componentChunkName":"component---src-templates-docs-js","path":"/data-structure-and-algorithm/2.data-structure/1.strings","result":{"data":{"site":{"siteMetadata":{"title":"DevBucket","docsLocation":""}},"mdx":{"fields":{"id":"1f49c60e-50de-588c-900e-5e42218eb627","title":"Strings","slug":"/data-structure-and-algorithm/2.data-structure/1.strings"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Strings\",\n  \"metaTitle\": \"Strings in Data Structure | DevBucket\",\n  \"metaDescription\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Strings in Data Structure\"), mdx(\"p\", null, \"In computer science, a string is a sequence of characters. It is a fundamental data type that is used extensively in programming. Strings are used to represent text, as well as binary data such as images and audio files. In DSA, strings are typically represented as arrays of characters. Each character in the string is stored in a separate element of the array. The length of the string is equal to the number of elements in the array.\"), mdx(\"p\", null, \"There are various operations that can be performed on strings in DSA. Some of the most common operations include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Concatenation:\"), \" In DSA, concatenation is the process of merging two or more strings into a single string. This operation is typically performed by appending one string to the end of the other. The concatenation of strings can be done using the \\\"+\\\" operator. For instance, if we concatenate the strings \\\"hello\\\" and \\\"world\\\", we would get the string \\\"helloworld\\\".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Substring:\"), \" In DSA, a substring is a contiguous sequence of characters that is a part of a string. It can be extracted from the original string by specifying the starting and ending indices. The operation of extracting a substring involves taking a part of a string. The \\\"substring\\\" method is typically used to perform this operation, which takes two parameters: the starting index and the length of the substring. For instance, if we take the substring of the string \\\"hello world\\\" starting at index 6 and of length 5, we would get \\\"world\\\".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Length:\"), \" Length operation involves determining the number of characters in a string. In DSA, this can be accomplished using the \\\"length\\\" method, which returns the number of characters in a string. For example, the length of the string \\\"hello world\\\" would be 11.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Comparison:\"), \" In DSA, comparing two strings involves determining whether they are equal or not by comparing each character in the strings. This operation is called string comparison, and it is performed using the \\\"equals\\\" method. For example, comparing the strings \\\"hello\\\" and \\\"hello\\\" would result in true, while comparing the strings \\\"hello\\\" and \\\"world\\\" would result in false.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Searching:\"), \" In the context of DSA, searching for a particular substring in a string involves finding the index or indices where the substring occurs within the original string. This operation is often performed using specialized algorithms such as the Knuth-Morris-Pratt (KMP) algorithm, the Boyer-Moore algorithm, or the Rabin-Karp algorithm. These algorithms are designed to efficiently search for substrings within large strings and can be used to solve a variety of string-related problems.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Sorting:\"), \" Sorting a set of strings involves organizing them in a specific order, such as alphabetical or numerical. This operation is useful when working with large collections of strings, such as lists of names or words. In DSA, various sorting algorithms can be used to sort strings efficiently, including quicksort, mergesort, and heapsort.\")), mdx(\"p\", null, \"DSA offers a variety of algorithms and data structures that are specifically tailored for string manipulation. These include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Trie:\"), \" A tree-like data structure that allows for efficient storage and search of a set of strings in linear time. It's commonly used for string matching and searching, and can be applied to efficiently search for words in a dictionary.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"String Matching Algorithms:\"), \" These algorithms help locate a pattern within a larger string. The most widely used ones are the Knuth-Morris-Pratt (KMP) algorithm and the Rabin-Karp algorithm.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Knuth-Morris-Pratt algorithm:\"), \" This algorithm is used to find substrings in linear time.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Boyer-Moore algorithm:\"), \" This algorithm is used for linear-time substring searching with better average-case performance than the Knuth-Morris-Pratt algorithm.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Rabin-Karp algorithm:\"), \" This algorithm uses hashing to perform substring searching.\")))), mdx(\"p\", null, \"Strings are an essential data structure in DSA and are widely utilized in numerous programming applications.\"), mdx(\"h2\", null, \"Some Important Questions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Subsequence and substring:\"), \" A subsequence is a sequence that can be derived from a string deleting one or more elements. A substring is a contiguous segment of the string.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Palindrome:\"), \" A palindrome string is a string in which the elements at the same distance from the center of the string are the same.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Pattern searching:\"), \" Pattern searching is searching a given pattern in the string. It is an advanced topic of string.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Reverse and rotation in a string:\"), \" Reverse operation is interchanging the position of characters of a string such that the first becomes the last, the second becomes the second last, and so on.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Binary String:\"), \" A binary string is a string made up of only two types of characters.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Lexicographic pattern:\"), \" Lexicographical pattern is the pattern based on the ASCII value or can be said in dictionary order.\")), mdx(\"h2\", null, \"Practice\"), mdx(\"h3\", null, \"Question: Program to reverse a string\"), mdx(\"p\", null, \"Given a string, write a recursive program to reverse it\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Solution 1:\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"const recursiveReverse = (str) => {\\n  let revString = '';\\n  let strLen = str.length;\\n\\n  for (let i = strLen - 1; i >= 0; i--) {\\n    revString += str[i];\\n  }\\n\\n  return revString;\\n}\\n\\nlet str = 'data structure';\\nconsole.log(recursiveReverse(str));\\n\\n// Output:\\n// erutcurts atad\\n\\n// Time Complexity: O(n) \\n// Space Complexity: O(n)\\n\")), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Solution 2\"))), mdx(\"p\", null, \"We can achieve a better time and space complexity by using a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"#two-pointer-approach\"\n  }, \"two-pointer approach\")), \" that swaps characters in-place, without the need to create a new string or array.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"const reverseStr = (str) => {\\n  let ch = str.split('');\\n  let start = 0;\\n  let end = str.length - 1;\\n\\n  while (start < end) {\\n    let temp = ch[start];\\n    ch[start] = ch[end];\\n    ch[end] = temp;\\n    start++;\\n    end--;\\n  }\\n\\n  return ch.join('');\\n};\\n\\nlet str = 'data structure';\\nconsole.log(reverseStr(str));\\n\\n// Output:\\n// erutcurts atad\\n\\n// Time Complexity: O(n) \\n// Space Complexity: O(n)\\n\")), mdx(\"p\", null, \"This code has a time complexity of O(n/2) = O(n), because the while loop iterates over half of the input string in the worst case. The space complexity is O(n), because we only create an array of characters that has the same length as the input string. The array is modified in place, without creating any new data structures. Therefore, this code is more efficient in both time and space complexity than the solution 1 code.\"), mdx(\"h3\", null, \"Question:Left Rotation and Right Rotation of a String\"), mdx(\"p\", null, \"Given a string of size n, write functions to perform the following operations on a string-\\nLeft (Or anticlockwise) rotate the given string by d elements (where d <= n)\\nRight (Or clockwise) rotate the given string by d elements (where d <= n).\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Solution 1\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"const rotate = (str, d) => {\\n  let frontSubStr = str.substring(0, d);\\n  let lastSubStr = str.substring(d, str.length);\\n  return lastSubStr + frontSubStr;\\n};\\n\\nconst leftRotate = (str, d) => {\\n  return rotate(str, d);\\n};\\n\\nconst rightRotate = (str, d) => {\\n  return rotate(str, str.length - d);\\n};\\n\\nvar str = \\\"datastructure\\\";\\nconsole.log(leftRotate(str, 2));\\nconsole.log(rightRotate(str, 2));\\n\\n// Output\\n// tastructureda\\n// redatastructu\\n\\n// Time Complexity: O(n) \\n// Space Complexity: O(n)\\n\")), mdx(\"p\", null, \"The substring method used in the rotate function has a time complexity of O(n) where n is the length of the input string. This method is called twice, so the total time complexity of the rotate function is O(n). The leftrotate and rightrotate functions simply call the rotate function once, so their time complexity is also O(n). Therefore, the overall time complexity of this code is O(n), where n is the length of the input string.\"), mdx(\"p\", null, \"The substring method used in the rotate function creates two new substrings, each of which has a length of at most n. Therefore, the total space complexity of the rotate function is O(n). The leftrotate and rightrotate functions do not create any new variables or data structures, so their space complexity is O(1). Therefore, the overall space complexity of this code is O(n), where n is the length of the input string.\"), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Solution 2\"))), mdx(\"p\", null, \"We can optimize the above code to reduce the time complexity of the rotate function from O(n) to O(d), where d is the number of rotations to be performed. This can be achieved by avoiding the use of the substring method and instead directly manipulating the characters in the input string using array notation.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"const rotate = (str, d) => {\\n  let arr = str.split('');\\n  for (let i = 0; i < d; i++) {\\n    let temp = arr.shift();\\n    arr.push(temp);\\n  }\\n  return arr.join('');\\n};\\n\\nconst leftRotate = (str, d) => {\\n  return rotate(str, d);\\n};\\n\\nconst rightRotate = (str, d) => {\\n  return rotate(str, str.length - d);\\n};\\n\\nvar str = \\\"datastructure\\\";\\nconsole.log(leftRotate(str, 2));\\nconsole.log(rightRotate(str, 2));\\n\\n// Output\\n// tastructureda\\n// redatastructu\\n\\n// Time Complexity: O(d) \\n// Space Complexity: O(n)\\n\")), mdx(\"p\", null, \"In the rotate function, we first convert the input string to an array of characters using the split method. Then, we use a loop to rotate the array d times by shifting the first character of the array to the end of the array d times. Finally, we join the array back into a string using the join method.\"), mdx(\"p\", null, \"With this approach, the time complexity of the rotate function is O(d), where d is the number of rotations to be performed. Since d is typically much smaller than the length of the input string, this approach is more efficient than using the substring method. The space complexity of the optimized code remains O(n), where n is the length of the input string.\"), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Solution 3\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"function rotate(str, d) {\\n  let rotatedStr = '';\\n  for (let i = d; i < str.length + d; i++) {\\n    rotatedStr += str[i % str.length];\\n  }\\n  return rotatedStr;\\n}\\n\\nconst leftRotate = (str, d) => {\\n  return rotate(str, d);\\n};\\n\\nconst rightRotate = (str, d) => {\\n  return rotate(str, str.length - d);\\n};\\n\\nvar str = \\\"datastructure\\\";\\nconsole.log(leftRotate(str, 2));\\nconsole.log(rightRotate(str, 2));\\n\\n// Output\\n// tastructureda\\n// redatastructu\\n\\n// Time Complexity: O(n) \\n// Space Complexity: O(n)\\n\")), mdx(\"p\", null, \"Both of these optimized functions have a time complexity of O(n), where n is the length of the input string, and a space complexity of O(n), as we are creating a new string.\"), mdx(\"h2\", null, \"Few Key Terms\"), mdx(\"h3\", null, \"Two-pointer approach\"), mdx(\"p\", null, \"The two-pointer approach is a technique commonly used in computer programming to optimize algorithms that require traversing through a sequence of elements, such as an array or a linked list. This technique involves using two pointers or indices that move through the sequence in opposite directions, either towards each other or in a parallel manner.\"), mdx(\"p\", null, \"In the two-pointer approach, one pointer starts at the beginning of the sequence, while the other pointer starts at the end of the sequence. The pointers then move towards each other until they meet in the middle, or until a certain condition is met. This approach can be used to optimize algorithms that require searching, sorting, or manipulating elements in a sequence.\"), mdx(\"p\", null, \"For example, in the context of reversing a string, the two-pointer approach involves using two pointers, one at the beginning and one at the end of the string, and swapping the characters at each position until the pointers meet in the middle. This approach has a time complexity of O(n/2), which is better than the O(n) time complexity of the approach that creates a new string or array. Overall, the two-pointer approach can be a powerful optimization technique for a wide range of programming problems.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// Reversing a string\\nconst reverseStr = (str) => {\\n  let ch = str.split('');\\n  let start = 0;\\n  let end = str.length - 1;\\n\\n  while (start < end) {\\n    let temp = ch[start];\\n    ch[start] = ch[end];\\n    ch[end] = temp;\\n    start++;\\n    end--;\\n  }\\n\\n  return ch.join('');\\n};\\n\\nlet str = 'data structure';\\nconsole.log(reverseStr(str));\\n\\n// Output:\\n// erutcurts atad\\n\\n// Time Complexity: O(n) \\n// Space Complexity: O(n)\\n\")), mdx(\"h2\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.geeksforgeeks.org/string-data-structure/\"\n  }, \"https://www.geeksforgeeks.org/string-data-structure/\"), \" (IMP)\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#strings-in-data-structure","title":"Strings in Data Structure"},{"url":"#some-important-questions","title":"Some Important Questions"},{"url":"#practice","title":"Practice","items":[{"url":"#question-program-to-reverse-a-string","title":"Question: Program to reverse a string"},{"url":"#questionleft-rotation-and-right-rotation-of-a-string","title":"Question:Left Rotation and Right Rotation of a String"}]},{"url":"#few-key-terms","title":"Few Key Terms","items":[{"url":"#two-pointer-approach","title":"Two-pointer approach"}]},{"url":"#resources","title":"Resources"}]},"parent":{"relativePath":"data-structure-and-algorithm/2.data-structure/1.strings.md"},"frontmatter":{"metaTitle":"Strings in Data Structure | DevBucket","metaDescription":""}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/web-application-design-principles-and-architecture/2.web-application-security","title":"Web Application Security and Threat Protection"}}},{"node":{"fields":{"slug":"/web-application-design-principles-and-architecture/1.web-application-development","title":"Web Application Development"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/1.clean-code","title":"Clean Code"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/2.programming-paradigms","title":"Programming Paradigms"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/1.clean-code/learn","title":"Clean Code Daily Read"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/3.object-oriented-programming","title":"Object Oriented Programming"}}},{"node":{"fields":{"slug":"/","title":"DevBucket"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/4.software-design-principles/1.solid-principles","title":"SOLID Principles"}}},{"node":{"fields":{"slug":"/system-design-and-architecture/1.database-design-and-management","title":"Database Design and Management"}}},{"node":{"fields":{"slug":"/system-design-and-architecture/2.architecture-design-documentation","title":"Architecture Design Documentation"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/html","title":"HTML"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/javascript","title":"JavaScript"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/node-js","title":"NodeJS"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/react-js","title":"ReactJS"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/react-js/reack-hooks","title":"React Hooks"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/go","title":"GO"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/1.complexities-and-notations","title":"Complexities and Notations"}}},{"node":{"fields":{"slug":"/software-design-and-architecture","title":"Software Design and Architecture"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks","title":"Programming Language"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm","title":"Data Structure and Algorithm"}}},{"node":{"fields":{"slug":"/system-design-and-architecture","title":"System Design and Architecture"}}},{"node":{"fields":{"slug":"/web-application-design-principles-and-architecture","title":"Web Application Design and Architecture"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/1.strings","title":"Strings"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/2.array","title":"Array"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure","title":"Data Structure"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/4.software-design-principles","title":"Software Design Principles"}}}]}},"pageContext":{"id":"1f49c60e-50de-588c-900e-5e42218eb627"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}