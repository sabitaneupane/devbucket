{"componentChunkName":"component---src-templates-docs-js","path":"/data-structure-and-algorithm/2.data-structure/5.dictionary","result":{"data":{"site":{"siteMetadata":{"title":"DevBucket","docsLocation":""}},"mdx":{"fields":{"id":"952a0264-e7bd-522f-b61c-d431f2afaf10","title":"Dictionary","slug":"/data-structure-and-algorithm/2.data-structure/5.dictionary"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Dictionary\",\n  \"metaTitle\": \"Dictionary in Data Structure | DevBucket\",\n  \"metaDescription\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Dictionary in Data Structure\"), mdx(\"p\", null, \"In computer science, a dictionary is a data structure that allows for the storage and retrieval of key-value pairs, similar to a map or associative array. A dictionary is sometimes called a hash table or hash map, depending on the implementation.\"), mdx(\"p\", null, \"Dictionaries are typically implemented using an array, where each element of the array is a key-value pair. To insert a key-value pair into the dictionary, the key is hashed to obtain an index in the array, and the value is stored at that index. To retrieve a value associated with a key, the key is hashed again to obtain the index in the array, and the value stored at that index is returned.\"), mdx(\"p\", null, \"Dictionaries are useful for tasks such as indexing and searching, and can be used to implement a variety of algorithms and data structures, including:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Symbol tables\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hash-based sets and maps\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bloom filters\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Count-min sketches\")), mdx(\"p\", null, \"Dictionaries are widely used in computer science and software engineering, and are a fundamental data structure for many applications. Some programming languages, such as Python, include built-in support for dictionaries, while others provide libraries or modules that implement them.\"), mdx(\"h2\", null, \"Dictionary Implementation\"), mdx(\"p\", null, \"In JavaScript, dictionaries can be implemented using objects. Here are some examples of how to use dictionaries in JavaScript:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Creating a Dictionary:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"const myDict = {};\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Adding a Key-Value Pair to a Dictionary:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"myDict[\\\"key1\\\"] = \\\"value1\\\";\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Getting the Value of a Key in a Dictionary:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"myDict[\\\"key1\\\"]; // returns \\\"value1\\\"\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Checking if a Key is in a Dictionary:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"\\\"key2\\\" in myDict; // returns false\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Removing a Key-Value Pair from a Dictionary:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"delete myDict[\\\"key1\\\"];\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Getting the Number of Key-Value Pairs in a Dictionary:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"Object.keys(myDict).length; // returns the number of key-value pairs in the dictionary\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Iterating through a Dictionary:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"for (const key in myDict) {\\n  console.log(key + \\\" = \\\" + myDict[key]);\\n}\\n\")))), mdx(\"p\", null, \"Dictionaries in JavaScript can also contain objects or other dictionaries as values, and the keys() and values() methods can be used to get arrays of keys or values in the dictionary, respectively. However, it's worth noting that unlike maps in JavaScript, dictionaries in JavaScript do not preserve the order of keys.\"), mdx(\"h2\", null, \"Practice\"), mdx(\"h3\", null, \"Question: Find the two numbers that add up to a specific target\"), mdx(\"p\", null, \"Given an array of integers, write a function to find the two numbers that add up to a specific target. The function should return an array of the indices of the two numbers.\"), mdx(\"p\", null, \"For example, given the following array and target:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const nums = [2, 7, 11, 15];\\nconst target = 9;\\n\")), mdx(\"p\", null, \"The function should return \", \"[0, 1]\", \", since nums\", \"[0]\", \" + nums\", \"[1]\", \" equals 9. Note that the indices are 0-based.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Solution 1:\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"function twoSum(nums, target) {\\n  const dict = {};\\n\\n  for (let i = 0; i < nums.length; i++) {\\n    const complement = target - nums[i];\\n    if (complement in dict) {\\n      return [dict[complement], i];\\n    }\\n    dict[nums[i]] = i;\\n  }\\n\\n  return null;\\n}\\n\\nconst nums = [2, 7, 11, 15];\\nconst target = 9;\\nconst indices = twoSum(nums, target);\\nconsole.log(indices); \\n\\n// Output: \\n// [0, 1]\\n\\n// Time Complexity: O(n) \\n// Space Complexity: O(n)\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The time complexity of this solution is O(n), where n is the length of the input array nums, since we are iterating through the array once. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The space complexity is also O(n), since in the worst case we might need to store all the elements in the dictionary.\")), mdx(\"h2\", null, \"Resources\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#dictionary-in-data-structure","title":"Dictionary in Data Structure"},{"url":"#dictionary-implementation","title":"Dictionary Implementation"},{"url":"#practice","title":"Practice","items":[{"url":"#question-find-the-two-numbers-that-add-up-to-a-specific-target","title":"Question: Find the two numbers that add up to a specific target"}]},{"url":"#resources","title":"Resources"}]},"parent":{"relativePath":"data-structure-and-algorithm/2.data-structure/5.dictionary.md"},"frontmatter":{"metaTitle":"Dictionary in Data Structure | DevBucket","metaDescription":""}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/web-application-design-principles-and-architecture/1.web-application-development","title":"Web Application Development"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/1.clean-code","title":"Clean Code"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/2.programming-paradigms","title":"Programming Paradigms"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/1.clean-code/learn","title":"Clean Code Daily Read"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm","title":"Data Structure and Algorithm"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure","title":"Data Structure"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/1.complexities-and-notations","title":"Complexities and Notations"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/1.strings","title":"Strings"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/10.tree","title":"Trees"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/11.graph","title":"Graph"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/14.matrix","title":"Matrix"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/12.hash-table","title":"Hash Table"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/13.heap","title":"Heap"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/15.grid","title":"Grid"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/16.trie","title":"Trie"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/2.array","title":"Array"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/3.sets","title":"Sets"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/4.maps","title":"Maps"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/5.dictionary","title":"Dictionary"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/6.tuples","title":"Tuples"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/8.stacks","title":"Stacks"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/7.linked-list","title":"Linked List"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/9.queues","title":"Queues"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/4.coding-patterns","title":"Coding Patterns"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/3.algorithm","title":"Algorithm"}}},{"node":{"fields":{"slug":"/","title":"DevBucket"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks","title":"Programming Language"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/1.html","title":"HTML"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/2.css","title":"CSS"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/2.css/flexbox","title":"CSS Flexbox"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/3.javascript","title":"JavaScript"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/5.node-js","title":"NodeJS"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/6.go","title":"GO"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/7.sql","title":"SQL"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/4.react-js/reack-hooks","title":"React Hooks"}}},{"node":{"fields":{"slug":"/software-design-and-architecture","title":"Software Design and Architecture"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/4.software-design-principles","title":"Software Design Principles"}}},{"node":{"fields":{"slug":"/software-development-tools","title":"Software Development Tools"}}},{"node":{"fields":{"slug":"/software-development-tools/postman","title":"Postman"}}},{"node":{"fields":{"slug":"/system-design-and-architecture","title":"System Design and Architecture"}}},{"node":{"fields":{"slug":"/system-design-and-architecture/1.database-design-and-management","title":"Database Design and Management"}}},{"node":{"fields":{"slug":"/system-design-and-architecture/2.architecture-design-documentation","title":"Architecture Design Documentation"}}},{"node":{"fields":{"slug":"/technical-career-path-and-guide","title":" Technical Career Path and Guide"}}},{"node":{"fields":{"slug":"/technical-career-path-and-guide/1.quality-assurance-engineer","title":"Quality Assurance Engineer"}}},{"node":{"fields":{"slug":"/web-application-design-principles-and-architecture","title":"Web Application Design and Architecture"}}},{"node":{"fields":{"slug":"/web-application-security","title":"Web Application Security"}}},{"node":{"fields":{"slug":"/web-application-security/1.authentication-and-authorization","title":"Authentication and Authorization"}}},{"node":{"fields":{"slug":"/technical-career-path-and-guide/2.chrome-extension-development","title":"Chrome Extension Development"}}},{"node":{"fields":{"slug":"/web-application-security/1.authentication-and-authorization/1.json-web-tokens","title":"JSON Web Tokens"}}},{"node":{"fields":{"slug":"/web-application-security/2.web-security-best-practices/1.developer-security-tips","title":"Developer Security Tips"}}},{"node":{"fields":{"slug":"/web-application-security/2.web-security-best-practices","title":"Web Security Best Practices"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/4.software-design-principles/1.solid-principles","title":"SOLID Principles"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/4.react-js","title":"ReactJS"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/3.object-oriented-programming","title":"Object Oriented Programming"}}}]}},"pageContext":{"id":"952a0264-e7bd-522f-b61c-d431f2afaf10"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}