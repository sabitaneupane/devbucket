{"componentChunkName":"component---src-templates-docs-js","path":"/data-structure-and-algorithm/2.data-structure/6.tuples","result":{"data":{"site":{"siteMetadata":{"title":"DevBucket","docsLocation":""}},"mdx":{"fields":{"id":"18feae5c-2c31-552d-93ba-9391f646af8a","title":"Tuples","slug":"/data-structure-and-algorithm/2.data-structure/6.tuples"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Tuples\",\n  \"metaTitle\": \"Tuples in Data Structure | DevBucket\",\n  \"metaDescription\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Tuples in Data Structure\"), mdx(\"p\", null, \"In computer science, a tuple is a data structure that represents a collection of elements, where each element can have a different data type. Tuples are similar to arrays, but whereas arrays have a fixed size and all elements must have the same data type, tuples can have a variable size and elements can have different data types. Tuples are sometimes also called records.\"), mdx(\"p\", null, \"Tuples can be implemented in many programming languages, and typically provide operations such as indexing and slicing. Tuples are useful for tasks such as representing multiple values returned by a function, or grouping related data together. In some cases, tuples can also be used to represent immutable data structures.\"), mdx(\"p\", null, \"Tuples can be used in a wide range of applications, including:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Representing database rows and columns\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Representing values returned by a function\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Grouping related data together\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Representing immutable data structures\")), mdx(\"p\", null, \"Some programming languages, such as Python and Ruby, include built-in support for tuples, while others provide libraries or modules that implement them. In languages where tuples are not natively supported, they can often be implemented using arrays or other data structures.\"), mdx(\"h2\", null, \"Tuples Implementation\"), mdx(\"p\", null, \"In JavaScript, tuples are not a built-in data structure, but they can be emulated using arrays or objects. Here are some ways to implement tuples in JavaScript:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Using Arrays:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"const myTuple = [1, \\\"hello\\\", true];\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Using Objects:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"const myTuple = {0: 1, 1: \\\"hello\\\", 2: true};\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In both cases, the elements of the tuple can be accessed using indexing:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"myTuple[0]; // returns 1\\nmyTuple[1]; // returns \\\"hello\\\"\\nmyTuple[2]; // returns true\\n\")))), mdx(\"p\", null, \"It's worth noting that JavaScript arrays and objects are dynamic and can be modified at any time, so the elements of a \\\"tuple\\\" implemented in this way can be changed after creation. Also, while tuples in other programming languages often have fixed size and type for their elements, this is not the case in JavaScript where arrays and objects can contain any type of value and can grow or shrink dynamically.\"), mdx(\"h2\", null, \"Practice\"), mdx(\"h3\", null, \"Question: Find all the unique triplets that sums 0\"), mdx(\"p\", null, \"Given an array of integers nums, write a function to find all the unique triplets (a,b,c), such that a + b + c = 0. You may return the triplets in any order.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Input: nums = [-1, 0, 1, 2, -1, -4]\\nOutput: [(-1, -1, 2), (-1, 0, 1)]\\nExplanation: The sum of (-1, -1, 2) is 0 and the sum of (-1, 0, 1) is 0, so these are the valid solutions.\\n\")), mdx(\"p\", null, \"Given \"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Solution 1:\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-Python\"\n  }, \"def threeSum(nums):\\n    nums.sort()\\n    result = set()\\n\\n    for i in range(len(nums)-2):\\n        if i > 0 and nums[i] == nums[i-1]:\\n            continue\\n        seen = set()\\n        for j in range(i+1, len(nums)):\\n            complement = -nums[i] - nums[j]\\n            if complement in seen:\\n                result.add((nums[i], complement, nums[j]))\\n            seen.add(nums[j])\\n    return list(result)\\n\\n# Input:\\n# nums = [-1, 0, 1, 2, -1, -4]\\n\\n# Output: \\n# [(-1, -1, 2), (-1, 0, 1)]\\n\\n# Time Complexity: O(n^2) \\n# Space Complexity: O(n)\\n\")), mdx(\"p\", null, \"In this solution, we use a tuple (nums\", \"[i]\", \", complement, nums\", \"[j]\", \") to represent a triplet. We add the triplet to the result set using the add() method.\"), mdx(\"p\", null, \"Finally, we convert the result set to a list using the list() method and return it as the final result.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The time complexity of the solution to the given LeetCode problem using tuples or arrays to represent triplets is O(n^2), where n is the length of the input array. The outer loop iterates n-2 times, and the inner loop iterates n-i-1 times for each value of i, giving a total of (n-2) * (n-1) / 2 iterations. Sorting the array takes O(nlogn) time, but it does not dominate the overall time complexity because O(n^2) is larger than O(nlogn).\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The space complexity of the solution is O(n), which is used to store the seen set. The result set also takes extra space to store the unique triplets, but the maximum size of the result set is also O(n^2), so it does not affect the space complexity analysis. Therefore, the overall space complexity is O(n).\"))), mdx(\"h2\", null, \"Resources\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#tuples-in-data-structure","title":"Tuples in Data Structure"},{"url":"#tuples-implementation","title":"Tuples Implementation"},{"url":"#practice","title":"Practice","items":[{"url":"#question-find-all-the-unique-triplets-that-sums-0","title":"Question: Find all the unique triplets that sums 0"}]},{"url":"#resources","title":"Resources"}]},"parent":{"relativePath":"data-structure-and-algorithm/2.data-structure/6.tuples.md"},"frontmatter":{"metaTitle":"Tuples in Data Structure | DevBucket","metaDescription":""}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/web-application-design-principles-and-architecture/1.web-application-development","title":"Web Application Development"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/1.clean-code","title":"Clean Code"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/2.programming-paradigms","title":"Programming Paradigms"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/1.clean-code/learn","title":"Clean Code Daily Read"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm","title":"Data Structure and Algorithm"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure","title":"Data Structure"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/1.complexities-and-notations","title":"Complexities and Notations"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/1.strings","title":"Strings"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/10.tree","title":"Trees"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/11.graph","title":"Graph"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/14.matrix","title":"Matrix"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/12.hash-table","title":"Hash Table"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/13.heap","title":"Heap"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/15.grid","title":"Grid"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/16.trie","title":"Trie"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/2.array","title":"Array"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/3.sets","title":"Sets"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/4.maps","title":"Maps"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/5.dictionary","title":"Dictionary"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/6.tuples","title":"Tuples"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/8.stacks","title":"Stacks"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/7.linked-list","title":"Linked List"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/9.queues","title":"Queues"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/4.coding-patterns","title":"Coding Patterns"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/3.algorithm","title":"Algorithm"}}},{"node":{"fields":{"slug":"/","title":"DevBucket"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks","title":"Programming Language"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/1.html","title":"HTML"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/2.css","title":"CSS"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/2.css/flexbox","title":"CSS Flexbox"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/3.javascript","title":"JavaScript"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/5.node-js","title":"NodeJS"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/6.go","title":"GO"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/7.sql","title":"SQL"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/4.react-js/reack-hooks","title":"React Hooks"}}},{"node":{"fields":{"slug":"/software-design-and-architecture","title":"Software Design and Architecture"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/4.software-design-principles","title":"Software Design Principles"}}},{"node":{"fields":{"slug":"/software-development-tools","title":"Software Development Tools"}}},{"node":{"fields":{"slug":"/software-development-tools/postman","title":"Postman"}}},{"node":{"fields":{"slug":"/system-design-and-architecture","title":"System Design and Architecture"}}},{"node":{"fields":{"slug":"/system-design-and-architecture/1.database-design-and-management","title":"Database Design and Management"}}},{"node":{"fields":{"slug":"/system-design-and-architecture/2.architecture-design-documentation","title":"Architecture Design Documentation"}}},{"node":{"fields":{"slug":"/technical-career-path-and-guide","title":" Technical Career Path and Guide"}}},{"node":{"fields":{"slug":"/technical-career-path-and-guide/1.quality-assurance-engineer","title":"Quality Assurance Engineer"}}},{"node":{"fields":{"slug":"/web-application-design-principles-and-architecture","title":"Web Application Design and Architecture"}}},{"node":{"fields":{"slug":"/web-application-security","title":"Web Application Security"}}},{"node":{"fields":{"slug":"/web-application-security/1.authentication-and-authorization","title":"Authentication and Authorization"}}},{"node":{"fields":{"slug":"/technical-career-path-and-guide/2.chrome-extension-development","title":"Chrome Extension Development"}}},{"node":{"fields":{"slug":"/web-application-security/1.authentication-and-authorization/1.json-web-tokens","title":"JSON Web Tokens"}}},{"node":{"fields":{"slug":"/web-application-security/2.web-security-best-practices/1.developer-security-tips","title":"Developer Security Tips"}}},{"node":{"fields":{"slug":"/web-application-security/2.web-security-best-practices","title":"Web Security Best Practices"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/4.software-design-principles/1.solid-principles","title":"SOLID Principles"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/4.react-js","title":"ReactJS"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/3.object-oriented-programming","title":"Object Oriented Programming"}}}]}},"pageContext":{"id":"18feae5c-2c31-552d-93ba-9391f646af8a"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}