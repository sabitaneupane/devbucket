{"componentChunkName":"component---src-templates-docs-js","path":"/software-design-and-architecture/3.object-oriented-programming","result":{"data":{"site":{"siteMetadata":{"title":"DevBucket","docsLocation":""}},"mdx":{"fields":{"id":"bd153a25-9577-523c-bcf1-f6cfb0695aff","title":"Object Oriented Programming","slug":"/software-design-and-architecture/3.object-oriented-programming"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Object Oriented Programming\",\n  \"metaTitle\": \"Object Oriented Programming | DevBucket\",\n  \"metaDescription\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Introduction\"), mdx(\"p\", null, \"Object-oriented programming (OOP) is a programming paradigm based on the concept of objects, which can contain data and code to manipulate that data. In OOP, objects are instances of classes, which define their attributes (data) and behaviors (code). OOP provides a way to organize and structure code into reusable and modular components.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The main principles of OOP include:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Encapsulation:\"), \" The idea of bundling data and related functions (methods) into a single unit, i.e., an object, and hiding the implementation details from the outside world. Encapsulation ensures that the internal state of an object is protected from external interference and prevents unintended modifications.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Inheritance:\"), \" The ability to create new classes by extending existing ones, inheriting their attributes and behaviors, and adding new ones. Inheritance allows developers to reuse existing code and build new classes on top of existing ones.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Polymorphism:\"), \" The ability of objects of different classes to be used interchangeably, allowing for flexibility and reuse of code. Polymorphism enables developers to write generic code that can work with objects of different types, making the code more versatile and adaptable.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Abstraction:\"), \" The idea of simplifying complex systems by breaking them down into smaller, more manageable parts, hiding the unnecessary details, and focusing on the essential features. Abstraction allows developers to create classes and objects that represent real-world entities and processes, making the code more intuitive and easier to understand.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Classes and Objects:\"), \" In OOP, classes are templates or blueprints for creating objects, which are instances of classes. Classes define the attributes (data) and behaviors (methods) of objects and provide a way to organize and structure code into reusable and modular components.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Some of the benefits of OOP include:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Reusability:\"), \" OOP allows for the creation of objects and classes that can be reused across different applications, promoting code reusability.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Modularity:\"), \" OOP provides a way to modularize code, making it easier to maintain, test, and debug.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Flexibility:\"), \" OOP allows for easy modification of code without affecting other parts of the system, making it highly flexible.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Scalability:\"), \" OOP allows for the addition of new objects and classes to the system, making it highly scalable.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Code reuse:\"), \" OOP promotes code reuse through the use of objects and classes, which can be used across different projects without rewriting the code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Abstraction:\"), \" OOP simplifies complex systems by using abstraction, making it easier to understand and modify code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Encapsulation:\"), \" OOP promotes encapsulation, which hides implementation details and protects data, making it more secure and reliable.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Polymorphism:\"), \" OOP allows for the use of objects of different types, making the code more versatile and adaptable.\")), mdx(\"p\", null, \"Some examples of OOP programming languages include Java, C++, Python, Ruby, and JavaScript. OOP is a powerful programming paradigm that can help developers write more efficient, maintainable, and scalable code.\"), mdx(\"h2\", null, \"Classes and Objects\"), mdx(\"h3\", null, \"Classes\"), mdx(\"p\", null, \"In object-oriented programming (OOP), a class is a blueprint or template for creating objects that define a set of properties and methods.\"), mdx(\"p\", null, \"Properties, also known as attributes or fields, are the data members of a class that define its characteristics or state. They represent the data that objects of the class will hold, and can be any data type such as strings, integers, or other objects. Properties can be public, private or protected, which determines their accessibility from outside the class.\"), mdx(\"p\", null, \"For example, a \\\"Person\\\" class may have properties such as \\\"name\\\", \\\"age\\\", \\\"gender\\\", \\\"height\\\", and \\\"weight\\\".\"), mdx(\"p\", null, \"In addition to properties, classes also define methods, which are functions that can be called on objects of the class. These methods can access and modify the properties of the object, and can perform various tasks or actions.\"), mdx(\"p\", null, \"Overall, classes provide a way to encapsulate related data and functionality, making it easier to organize and maintain code in larger programs.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Car {\\n  constructor(make, model, year) {\\n    this.make = make;\\n    this.model = model;\\n    this.year = year;\\n  }\\n  \\n  getAge() {\\n    let currentYear = new Date().getFullYear();\\n    return currentYear - this.year;\\n  }\\n  \\n  static compare(car1, car2) {\\n    if (car1.getAge() < car2.getAge()) {\\n      return `${car1.make} ${car1.model} is older than ${car2.make} ${car2.model}`;\\n    } else if (car1.getAge() > car2.getAge()) {\\n      return `${car1.make} ${car1.model} is newer than ${car2.make} ${car2.model}`;\\n    } else {\\n      return `${car1.make} ${car1.model} is the same age as ${car2.make} ${car2.model}`;\\n    }\\n  }\\n}\\n\\nlet myCar = new Car('Toyota', 'Corolla', 2010);\\nconsole.log(myCar.getAge()); // Output: 13\\n\\nlet friendCar = new Car('Honda', 'Accord', 2015);\\nconsole.log(Car.compare(myCar, friendCar)); // Output: Toyota Corolla is older than Honda Accord\\n\")), mdx(\"p\", null, \"In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" class has three fields (make, model, year), one instance method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(getAge())\"), \", and one static method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(compare())\"), \".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"constructor()\"), \" method is called when a new instance of the class is created and is used to initialize the class's fields. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getAge()\"), \" method is an instance method that calculates and returns the age of the car based on the current year. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"compare()\"), \" method is a static method that takes two \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" objects as arguments and compares their ages.\"), mdx(\"p\", null, \"We create two instances of the Car class using the new keyword and access the instance method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getAge()\"), \" on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myCar\"), \" to get its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"age\"), \". We also call the static method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"compare()\"), \" on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" class and pass in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myCar\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"friendCar\"), \" objects to compare their ages.\"), mdx(\"h3\", null, \"Objects\"), mdx(\"p\", null, \"In object-oriented programming, an object is an instance of a class that encapsulates data and behavior. An object has properties, which are the data associated with it, and methods, which are the functions or operations that can be performed on it. When a class is defined, it serves as a blueprint for creating objects. Each object created from the same class will have the same properties and methods, but the values of the properties can be unique to each object. Objects are used to model real-world entities or abstract concepts in a program, and they allow developers to write code that is more organized, reusable, and scalable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"const person = {\\n  name: 'John',\\n  age: 30,\\n  isStudent: false,\\n  hobbies: ['reading', 'swimming', 'gaming'],\\n  greet: function() {\\n    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);\\n  }\\n};\\n\\nperson.greet(); // output: \\\"Hello, my name is John and I am 30 years old.\\\"\\nconsole.log(person.hobbies[0]); // output: \\\"reading\\\"\\n\")), mdx(\"p\", null, \"In this example, person is an object with several properties such as name, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"age\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isStudent\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hobbies\"), \", as well as a method called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"greet\"), \". We can access the properties of the object using dot notation (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"person.name\"), \") or bracket notation (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"person['age']\"), \"), and we can call the method using dot notation as well (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"person.greet()\"), \").\"), mdx(\"h2\", null, \"Methods and its types\"), mdx(\"p\", null, \"In object-oriented programming, a method is a function associated with an object or class that defines the behavior of that object or class. A method can be thought of as a procedure or subprogram that can be called on an object or class to perform a specific task or operation.\"), mdx(\"p\", null, \"Methods typically have a name, a set of parameters (if any), and a return type (if any). They can perform operations on the object's data and can also interact with other objects and methods.\"), mdx(\"p\", null, \"For example, a class representing a bank account might have methods like \\\"deposit\\\" and \\\"withdraw\\\", which would take in a parameter for the amount of money to be added or subtracted from the account balance. Another example is a class representing a car, which might have methods like \\\"start_engine\\\" or \\\"accelerate\\\" to perform tasks specific to the behavior of a car.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Person {\\n  constructor(name, age) {\\n    this.name = name;\\n    this.age = age;\\n  }\\n  \\n  greet() {\\n    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);\\n  }\\n}\\n\\nlet john = new Person(\\\"John\\\", 30);\\njohn.greet(); // Output: Hello, my name is John and I am 30 years old.\\n\")), mdx(\"p\", null, \"In this example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"greet()\"), \" is a method defined inside the Person class. When the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"greet()\"), \" method is called on an instance of the Person class (in this case, john), it logs a greeting message to the console that includes the person's name and age.\"), mdx(\"h3\", null, \"Types of Methods\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Instance methods:\"), \" \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"These are methods that are associated with an instance of a class and can be called on that instance. Instance methods have access to the instance's data and can modify it as needed.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Car {\\n  constructor(make, model) {\\n    this.make = make;\\n    this.model = model;\\n    this.speed = 0;\\n  }\\n\\n  accelerate() {\\n    this.speed += 10;\\n  }\\n\\n  brake() {\\n    this.speed -= 10;\\n  }\\n\\n  getSpeed() {\\n    return this.speed;\\n  }\\n}\\n\\nconst myCar = new Car('Toyota', 'Corolla');\\nmyCar.accelerate();\\nconsole.log(myCar.getSpeed()); // Output: 10\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In this example, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"accelerate()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"brake()\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"getSpeed()\"), \" are instance methods because they are defined on the Car class and are called on an instance of the class (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"myCar\"), \").\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Class methods:\"), \" \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"These are methods that operate on the class itself rather than on any particular instance of the class. Class methods are often used to create new instances of the class or to perform other operations that are related to the class as a whole.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Car {\\n  constructor(make, model) {\\n    this.make = make;\\n    this.model = model;\\n    this.speed = 0;\\n  }\\n\\n  static numberOfWheels() {\\n    return 4;\\n  }\\n}\\n\\nconsole.log(Car.numberOfWheels()); // Output: 4\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In this example, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"numberOfWheels()\"), \" is a class method because it is defined using the static keyword and can be called on the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Car\"), \" class itself, rather than on an instance of the class.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Static methods:\"), \" \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"These are methods that belong to the class itself rather than to any particular instance of the class. Static methods are typically used for utility functions that don't depend on any instance-specific data.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A static method is a method that belongs to a class rather than an instance of a class. This means that the method can be called without the need for an object to be created first. In other words, a static method can be called directly on the class itself, rather than on an instance of the class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Static methods are typically used for utility functions or operations that don't require access to instance-specific data. They are often used for tasks such as input validation or type conversion, where the method operates on input data and returns a result, without modifying any state or data within the class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In JavaScript, a static method is defined using the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"static\"), \" keyword in front of the method name, like this:\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class MyClass {\\n  static myStaticMethod() {\\n    // Do something here\\n  }\\n}\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To call a static method, you can use the class name followed by the method name:\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"MyClass.myStaticMethod();\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Abstract methods:\"), \" \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"These are methods that are declared in a class but don't have an implementation. Subclasses of the class must provide an implementation for these methods.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In object-oriented programming, an abstract method is a method in a class that has no implementation in the base class but must be implemented in a subclass. Abstract methods are declared with the abstract keyword and are used to define a common interface for a group of subclasses that share some common behavior or functionality.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"public abstract class Shape {\\n  public abstract double area(); // abstract method\\n}\\n\\npublic class Circle extends Shape {\\n  private double radius;\\n\\n  public Circle(double radius) {\\n      this.radius = radius;\\n  }\\n\\n  @Override\\n  public double area() { // implementation of abstract method\\n      return Math.PI * radius * radius;\\n  }\\n}\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In this example, the Shape class has an abstract method called \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"area()\"), \" that is implemented by its subclasses such as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Circle\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Circle\"), \" class provides an implementation of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"area()\"), \" method based on its own unique properties.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"By using abstract methods, we can ensure that all subclasses of a base class implement a specific method, while still allowing them to provide their own implementation based on their unique properties. This helps to enforce a common interface and promotes code reuse and modularity.\")))), mdx(\"h2\", null, \"Class Members\"), mdx(\"p\", null, \"In object-oriented programming, a class is a blueprint or template for creating objects. Class members are the variables and functions defined within the class that can be accessed and used by objects created from that class. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"There are four main types of class members:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Fields:\"), \" Fields are variables defined within a class that store data. They represent the state of the object and can be accessed and modified by the object's methods. Fields can be private, protected, or public, depending on their visibility and accessibility.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Person {\\n  #age = 0; // private field\\n  \\n  get age() {\\n    return this.#age;\\n  }\\n  \\n  set age(value) {\\n    if (value < 0) {\\n      throw new Error('Age cannot be negative');\\n    }\\n    this.#age = value;\\n  }\\n}\\n\\nconst person = new Person();\\nperson.age = 30;\\nconsole.log(person.age); // Output: 30\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Properties:\"), \" Properties provide a way to access and modify the value of a private field. They allow for better control over the values stored in the object's fields and can have custom getter and setter methods to enforce data validation.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Rectangle {\\n  #width;\\n  #height;\\n  \\n  constructor(width, height) {\\n    this.#width = width;\\n    this.#height = height;\\n  }\\n  \\n  get area() {\\n    return this.#width * this.#height;\\n  }\\n  \\n  get perimeter() {\\n    return 2 * (this.#width + this.#height);\\n  }\\n}\\n\\nconst rectangle = new Rectangle(10, 5);\\nconsole.log(rectangle.area); // Output: 50\\nconsole.log(rectangle.perimeter); // Output: 30\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Methods:\"), \" Methods are functions defined within a class that can perform actions or return values. They can access the class's fields and properties and can be private, protected, or public, depending on their visibility and accessibility.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Calculator {\\n  static add(a, b) {\\n    return a + b;\\n  }\\n  \\n  static subtract(a, b) {\\n    return a - b;\\n  }\\n  \\n  static multiply(a, b) {\\n    return a * b;\\n  }\\n  \\n  static divide(a, b) {\\n    if (b === 0) {\\n      throw new Error('Division by zero');\\n    }\\n    return a / b;\\n  }\\n}\\n\\nconsole.log(Calculator.add(5, 3)); // Output: 8\\nconsole.log(Calculator.subtract(5, 3)); // Output: 2\\nconsole.log(Calculator.multiply(5, 3)); // Output: 15\\nconsole.log(Calculator.divide(6, 3)); // Output: 2\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Events:\"), \" Events are mechanisms that allow objects to communicate with each other. They are triggered by specific actions, such as clicking a button or changing the value of a property, and can be subscribed to by other objects to perform a specific action.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Button {\\n  constructor() {\\n    this.onClick = null;\\n  }\\n  \\n  click() {\\n    if (this.onClick) {\\n      this.onClick();\\n    }\\n  }\\n}\\n\\nconst button = new Button();\\nbutton.onClick = function() {\\n  console.log('Button clicked');\\n};\\nbutton.click(); // Output: \\\"Button clicked\\\"\\n\")), mdx(\"p\", null, \"Together, these class members define the behavior and capabilities of objects created from that class, making them a fundamental part of object-oriented programming.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Class members can also be classified as instance members and class members:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Instance members:\"), \" These are the members that are bound to the object of the class. Each object of the class has its own copy of instance members. Instance members can be accessed using the dot (.) operator on the object of the class.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Car {\\n  constructor(make, model, year) {\\n    this.make = make;\\n    this.model = model;\\n    this.year = year;\\n    this.speed = 0;\\n  }\\n\\n  accelerate() {\\n    this.speed += 10;\\n  }\\n\\n  brake() {\\n    this.speed -= 10;\\n  }\\n\\n  getSpeed() {\\n    return this.speed;\\n  }\\n}\\n\\nlet myCar = new Car(\\\"Toyota\\\", \\\"Corolla\\\", 2022);\\nmyCar.accelerate();\\nmyCar.accelerate();\\nconsole.log(myCar.getSpeed()); // output: 20\\n\")), mdx(\"p\", null, \"In this example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"make\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"model\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"year\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speed\"), \" are instance fields or properties because they hold data specific to each instance of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" class. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accelerate()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"brake()\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getSpeed()\"), \" methods are instance methods because they act on the data specific to each instance of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" class. The myCar object is an instance of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" class with its own set of field values and method behaviors.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Class members:\"), \" These are the members that are shared across all objects of the class. They are defined using the class name, not the object name. Class members are accessed using the dot (.) operator on the class.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Car {\\n  static numOfCars = 0; // Class member\\n  \\n  constructor(make, model, year) {\\n    this.make = make; // Instance member\\n    this.model = model; // Instance member\\n    this.year = year; // Instance member\\n    Car.numOfCars++; // Accessing class member\\n  }\\n  \\n  getAge() { // Instance member\\n    const currentYear = new Date().getFullYear();\\n    return currentYear - this.year;\\n  }\\n  \\n  static getTotalCars() { // Class member\\n    return Car.numOfCars;\\n  }\\n}\\n\\nconst car1 = new Car('Toyota', 'Camry', 2020);\\nconst car2 = new Car('Honda', 'Accord', 2021);\\nconsole.log(car1.getAge()); // Output: 2\\nconsole.log(Car.getTotalCars()); // Output: 2\\n\\n\")), mdx(\"p\", null, \"In this example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" is a class that has instance members (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"make\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"model\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"year\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getAge()\"), \") and class members (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"numOfCars\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getTotalCars()\"), \"). \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"numOfCars\"), \" is a class member that keeps track of the total number of Car instances created, and it is accessed using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" class itself (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car.numOfCars\"), \"). \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getTotalCars()\"), \" is a class member that returns the total number of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" instances created. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"make\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"model\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"year\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getAge()\"), \" are instance members that are unique to each instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" created using the new keyword.\"), mdx(\"h3\", null, \"Constructors and Destructors\"), mdx(\"p\", null, \"In object-oriented programming, constructors and destructors are special methods that are used to initialize and clean up an object, respectively.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Constructors\"), \" are special methods in a class that are called when an object of the class is created. They are used to initialize the object's state and allocate any resources that the object needs.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Destructors\"), \" are special methods in a class that are called when an object is destroyed or goes out of scope. They are used to free up any resources that the object was using.\")), mdx(\"h4\", null, \"Class constructors\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Class constructors are used to create and initialize objects of a class. They are called when an object is created using the \\\"new\\\" keyword.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In JavaScript, a constructor is a function that has the same name as the class and is defined using the \\\"class\\\" keyword. The constructor is used to initialize the object's properties.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A class constructor is a special method that is called automatically when an object of that class is created. The constructor method is used to initialize the instance variables of the class and perform any necessary setup operations. In JavaScript, a constructor function is created using the class keyword.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Person {\\n  constructor(name, age) {\\n    this.name = name;\\n    this.age = age;\\n  }\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In the above example, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Person\"), \" is a class with a constructor method that takes two parameters (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"name\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"age\"), \") and initializes the instance variables of the class (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"this.name\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"this.age\"), \").\")), mdx(\"h4\", null, \"Object initialization\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Object initialization is the process of setting the initial values of an object's properties. In JavaScript, object initialization can be done using object literals or by calling a constructor function with the \\\"new\\\" keyword.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Object literals are a way to create objects in JavaScript by defining their properties in curly braces, like this: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"{prop1: value1, prop2: value2}\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Object initialization is the process of creating an instance of a class and initializing its properties using the constructor method. In JavaScript, object initialization is done using the new keyword.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"let person = new Person(\\\"John Doe\\\", 30);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In the above example, person is an instance of the Person class that is created using the new keyword and initialized with the values \\\"John Doe\\\" and 30 for the name and age properties, respectively.\")), mdx(\"h4\", null, \"Class destructors\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Class destructors are not directly supported in JavaScript because the garbage collector automatically frees up memory when an object is no longer referenced.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"However, developers can define a \\\"cleanup\\\" method in the class that can be called when the object is no longer needed. This method can be used to free up any resources that the object was using, such as event listeners or timers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unlike some other programming languages, JavaScript does not have a built-in destructor method. Instead, you can define a method to clean up the object when it is no longer needed. This method can be called manually or using a garbage collector.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Person {\\n  constructor(name, age) {\\n    this.name = name;\\n    this.age = age;\\n  }\\n\\n  destroy() {\\n    console.log(`${this.name} is being destroyed.`);\\n    // perform cleanup operations\\n  }\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In the above example, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Person\"), \" is a class with a destroy method that can be used to clean up the object. This method can be called manually when the object is no longer needed.\")), mdx(\"h2\", null, \"Modifiers\"), mdx(\"p\", null, \"Modifiers are keywords used in object-oriented programming languages to change the behavior of class members, classes, or methods. They allow developers to control how these elements are accessed or used by other parts of the code.\"), mdx(\"p\", null, \"In general, modifiers can be divided into three categories: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"access modifiers, \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"member modifiers, and \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"class level modifiers\")), mdx(\"p\", null, \"Understanding modifiers is important in OOP because they can affect how code is written, organized, and accessed. Choosing the right modifiers for a particular situation can improve the readability, maintainability, and security of code.\"), mdx(\"h3\", null, \"Access Modifiers\"), mdx(\"p\", null, \"Access modifiers are keywords in object-oriented programming languages that define the scope of class members (fields, properties, methods) and constructors. They determine the level of accessibility of a class member from outside the class or from derived classes. In most programming languages, there are three types of access modifiers: public, private, and protected, while some languages also include an internal modifier.\"), mdx(\"p\", null, \"Access modifiers determine the visibility of class members to other parts of the code. The four main access modifiers in most OOP languages are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Public:\"), \" A public member is accessible from anywhere in the program. Any code outside the class can access public fields, properties, and methods.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Car {\\n  constructor(make, model) {\\n    this.make = make;\\n    this.model = model;\\n  }\\n\\n  getDetails() {\\n    return `This is a ${this.make} ${this.model}.`;\\n  }\\n}\\n\\nconst car = new Car('Honda', 'Civic');\\nconsole.log(car.make); // Output: Honda\\nconsole.log(car.getDetails()); // Output: This is a Honda Civic.\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Private:\"), \" A private member is only accessible within the class in which it is defined. Private members are indicated by the use of the private keyword.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Car {\\n  #engineType;\\n\\n  constructor(make, model, engineType) {\\n    this.make = make;\\n    this.model = model;\\n    this.#engineType = engineType;\\n  }\\n\\n  #getEngineType() {\\n    return this.#engineType;\\n  }\\n\\n  getDetails() {\\n    return `This is a ${this.make} ${this.model} with a ${this.#getEngineType()} engine.`;\\n  }\\n}\\n\\nconst car = new Car('Honda', 'Civic', 'VTEC');\\nconsole.log(car.make); // Output: Honda\\nconsole.log(car.#engineType); // SyntaxError: Private field '#engineType' must be declared in an enclosing class\\nconsole.log(car.getDetails()); // Output: This is a Honda Civic with a VTEC engine.\\n\")), mdx(\"p\", null, \"In the above example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#engineType\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#getEngineType()\"), \" are private members, which can only be accessed within the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" class.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Protected:\"), \" A protected member is accessible within the class and its subclasses. Protected members are indicated by the use of the protected keyword.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Vehicle {\\n  #engineType;\\n\\n  constructor(engineType) {\\n    this.#engineType = engineType;\\n  }\\n\\n  #getEngineType() {\\n    return this.#engineType;\\n  }\\n}\\n\\nclass Car extends Vehicle {\\n  constructor(make, model, engineType) {\\n    super(engineType);\\n    this.make = make;\\n    this.model = model;\\n  }\\n\\n  getDetails() {\\n    return `This is a ${this.make} ${this.model} with a ${this.#getEngineType()} engine.`;\\n  }\\n}\\n\\nconst car = new Car('Honda', 'Civic', 'VTEC');\\nconsole.log(car.make); // Output: Honda\\nconsole.log(car.#engineType); // SyntaxError: Private field '#engineType' must be declared in an enclosing class\\nconsole.log(car.getDetails()); // Output: This is a Honda Civic with a VTEC engine.\\n\")), mdx(\"p\", null, \"In the above example, #engineType is a private member of the Vehicle class, but since the Car class extends the Vehicle class, it has access to the #engineType field.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Internal:\"), \" Internal access modifier is a C# language-specific access modifier that allows access to class members within the same assembly. It is used to restrict access to members of a class to the current assembly. Internal members can be accessed by any code within the same assembly (in .NET languages) or module (in Java).\")), mdx(\"h3\", null, \"Member Modifiers\"), mdx(\"p\", null, \"Member modifiers change the behavior of individual class members, such as fields or methods. Some common member modifiers include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Static:\"), \" Specifies that the member belongs to the class, not to instances of the class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Final:\"), \" Indicates that the member's value cannot be changed once it has been set.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Abstract:\"), \" Specifies that the member has no implementation and must be overridden by derived classes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Virtual:\"), \" Indicates that the member can be overridden in derived classes, but has a default implementation in the base class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Override:\"), \" Specifies that the member is intended to override a base class member with the same name and signature.\")), mdx(\"h3\", null, \"Class Level Modifiers\"), mdx(\"p\", null, \"Class level modifiers change the behavior of the entire class. Some common class level modifiers include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Abstract:\"), \" Specifies that the class cannot be instantiated directly and must be subclassed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Final:\"), \" Indicates that the class cannot be subclassed or modified.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Static:\"), \" Specifies that the class belongs to the type itself, not to instances of the type.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Partial:\"), \" Allows a class to be defined in multiple source files.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Sealed:\"), \" Indicates that the class cannot be inherited by other classes.\")), mdx(\"h2\", null, \"Encapsulation\"), mdx(\"p\", null, \"Encapsulation is a fundamental concept in object-oriented programming (OOP) that refers to the bundling of data and methods (i.e., functions) that operate on that data into a single unit, called a class. Encapsulation allows for the data to be protected from external access and manipulation, which helps to ensure the integrity and consistency of the data.\"), mdx(\"p\", null, \"In other words, encapsulation refers to the practice of hiding the implementation details of an object from the outside world and providing a well-defined interface (i.e., a set of public methods) for interacting with that object. By encapsulating data and methods within a class, the implementation details can be changed without affecting the rest of the program, as long as the public interface remains the same.\"), mdx(\"p\", null, \"Encapsulation also enables abstraction, which is another important concept in OOP. Abstraction involves reducing complex systems to simpler, more manageable components, and encapsulation allows for the implementation details of those components to be hidden while still providing a simplified, user-friendly interface for interacting with them.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// Here's an example of encapsulation using closures in JavaScript:\\nfunction Counter() {\\n  let count = 0; // private variable\\n  \\n  function increment() { // private method\\n    count++;\\n    console.log(count);\\n  }\\n  \\n  return {\\n    increment: increment\\n  };\\n}\\n\\nconst counter = Counter();\\ncounter.increment(); // logs 1\\ncounter.increment(); // logs 2\\n\")), mdx(\"p\", null, \"In this example, we define a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Counter\"), \" function that has a private variable count and a private method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"increment\"), \". We then return an object that has a single method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"increment\"), \", which can be used to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"increment\"), \" the counter.\"), mdx(\"p\", null, \"When we call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Counter()\"), \", it returns an object with a single method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"increment\"), \". This method has access to the private variable count and the private method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"increment\"), \", even though they are not directly accessible from outside the function.\"), mdx(\"p\", null, \"This is an example of encapsulation because we have hidden the implementation details (the private variable and method) from the outside world and only exposed a public interface (the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"increment\"), \" method). This makes the code more modular, easier to understand, and less prone to bugs.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Important of Encapsulation:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Data protection:\"), \" Encapsulation helps to protect the data stored in an object's properties from external access and manipulation. This helps to ensure the integrity and consistency of the data, and helps to prevent accidental or malicious modification of the data.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Abstraction:\"), \" Encapsulation enables abstraction, which involves reducing complex systems to simpler, more manageable components. Encapsulation allows the implementation details of those components to be hidden while still providing a simplified, user-friendly interface for interacting with them.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Modularity:\"), \" Encapsulation helps to make code more modular, which makes it easier to maintain and modify over time. By encapsulating the data and methods within a class, changes to the implementation details of the object can be made without affecting the external code that uses the object.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Security:\"), \" Encapsulation helps to improve the security of the software by hiding the implementation details of the object's properties and methods from the outside world. This helps to prevent unauthorized access to the data and methods, and helps to make the software less prone to errors and vulnerabilities.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Code reusability:\"), \" Encapsulation facilitates code reusability, as objects that are encapsulated within a class can be easily reused in other parts of the code. This helps to reduce code duplication and makes the code more efficient and maintainable.\")), mdx(\"p\", null, \"Overall, encapsulation is a fundamental concept in object-oriented programming that helps to improve the reliability, security, and maintainability of software systems\"), mdx(\"h3\", null, \"Properties and methods encapsulation\"), mdx(\"p\", null, \"Properties and methods encapsulation involves defining a class's properties as private or protected and providing public methods to access and modify them. This ensures that the class's internal state is controlled and that its behavior is consistent.\"), mdx(\"p\", null, \"Encapsulation applies to both properties and methods in the following ways:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Encapsulating properties:\"), \" Properties are the variables that hold the data within a class. Encapsulation of properties means that they are protected from direct access and manipulation by external code. Instead, the properties are accessed and modified only through the public interface of the class, typically using getter and setter methods. This helps to ensure the integrity and consistency of the data stored in the properties.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Encapsulating methods:\"), \" Methods are the functions that operate on the data stored in the properties of a class. Encapsulation of methods means that they are protected from external access and modification. The methods are typically defined as private or protected, and are accessed only through the public interface of the class. This helps to ensure that the behavior of the object is consistent and predictable.\"))), mdx(\"p\", null, \"Overall, encapsulation of properties and methods is important because it helps to ensure the integrity and consistency of the data and behavior of the object. It also helps to simplify the code and make it easier to maintain and modify over time, as changes to the implementation details of the object can be made without affecting the external code that uses the object.\"), mdx(\"h3\", null, \"Data Hiding\"), mdx(\"p\", null, \"Data hiding is a key concept in object-oriented programming (OOP) that refers to the practice of hiding the implementation details of an object's properties and methods from the outside world. Data hiding is achieved by encapsulating the data and methods within a class and providing a well-defined interface for accessing and modifying that data.\"), mdx(\"p\", null, \"Data hiding helps to ensure that the data stored in an object's properties is protected from direct access and manipulation by external code. Instead, the data is accessed and modified only through the public interface of the class, typically using getter and setter methods. This helps to ensure the integrity and consistency of the data, and helps to prevent accidental or malicious modification of the data.\"), mdx(\"p\", null, \"In addition to protecting the data stored in an object's properties, data hiding also helps to protect the methods that operate on that data. By encapsulating the methods within the class, they are protected from external access and modification, which helps to ensure that the behavior of the object is consistent and predictable.\"), mdx(\"p\", null, \"Overall, data hiding is an important concept in OOP because it helps to ensure the security and reliability of the software, and makes it easier to maintain and modify over time. By hiding the implementation details of the object's properties and methods from the outside world, the software is less prone to errors and vulnerabilities, and is more robust and flexible in the face of changing requirements.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// In JavaScript, data hiding can be achieved using closures.\\n\\nfunction Counter() {\\n  let count = 0;\\n\\n  function increment() {\\n    count++;\\n    console.log(count);\\n  }\\n\\n  return {\\n    increment: increment\\n  };\\n}\\n\\nconst counter = Counter();\\ncounter.increment(); // Output: 1\\ncounter.increment(); // Output: 2\\n\")), mdx(\"p\", null, \"In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \" variable is hidden from the outside world and can only be accessed through the increment function. The increment function is returned as a public method from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Counter\"), \" function and can be called from outside. The value of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \" variable is incremented each time the increment method is called, and the updated value is logged to the console.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Important of Data hiding:\")), mdx(\"p\", null, \"Data hiding is an important aspect of encapsulation in object-oriented programming (OOP). Here are some reasons why data hiding is important:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Data protection:\"), \" Data hiding helps to protect the data stored in an object's properties from external access and manipulation. By hiding the data, the object can control how the data is accessed and modified, which helps to ensure the integrity and consistency of the data.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Encapsulation:\"), \" Data hiding is a key component of encapsulation, which involves bundling data and methods that operate on that data into a single unit, called a class. Encapsulation allows the implementation details of the object to be hidden while still providing a well-defined interface for interacting with the object.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Abstraction:\"), \" Data hiding enables abstraction, which involves reducing complex systems to simpler, more manageable components. By hiding the data, the object can provide a simplified, user-friendly interface for interacting with that data.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Modularity:\"), \" Data hiding helps to make code more modular, which makes it easier to maintain and modify over time. By hiding the data, changes to the implementation details of the object can be made without affecting the external code that uses the object.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Security:\"), \" Data hiding helps to improve the security of the software by hiding the data from external access. This helps to prevent unauthorized access to the data and helps to make the software less prone to errors and vulnerabilities.\")), mdx(\"p\", null, \"Overall, data hiding is an important concept in OOP because it helps to ensure the reliability, security, and maintainability of software systems. By hiding the data from external access, the object can control how the data is accessed and modified, which helps to ensure the integrity and consistency of the data, and makes the software more robust and flexible in the face of changing requirements.\"), mdx(\"h3\", null, \"Tightly Encapsulated Class\"), mdx(\"p\", null, \"A tightly encapsulated class is a class in object-oriented programming that has a high degree of encapsulation, meaning that the data and methods within the class are tightly controlled and hidden from external access. This type of class is often designed with the goal of providing a secure and reliable software component that can be easily maintained and modified.\"), mdx(\"p\", null, \"A tightly encapsulated class typically has the following characteristics:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Private data:\"), \" The data within the class is kept private and is not directly accessible from outside the class. This ensures that the data is protected from accidental or malicious modification.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Accessor methods:\"), \" The class provides public accessor methods (also known as getter methods) that allow external code to retrieve the values of the private data. These methods typically do not allow external code to modify the data directly.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Mutator methods:\"), \" The class provides public mutator methods (also known as setter methods) that allow external code to modify the values of the private data. These methods typically validate the input data to ensure that it is valid before modifying the private data.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Minimal public interface:\"), \" The class provides a minimal public interface that exposes only the methods and data that are necessary for external code to interact with the class. This helps to reduce the complexity of the class and makes it easier to maintain and modify over time.\")), mdx(\"p\", null, \"Overall, a tightly encapsulated class is an important design principle in object-oriented programming that helps to improve the reliability, security, and maintainability of software systems. By tightly controlling the data and methods within the class, the class can provide a secure and reliable software component that can be easily maintained and modified.\"), mdx(\"h3\", null, \"Accessor methods\"), mdx(\"p\", null, \"Getters and setters, also known as accessor methods, are methods used in object-oriented programming (OOP) to access and modify the private data members of a class. Getters and setters allow for the encapsulation of data, which means that the data is kept hidden and can only be accessed or modified through the methods provided by the class.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Using accessor methods provides a number of benefits, including:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Encapsulation:\"), \" Accessor methods allow you to encapsulate the data in a class and control how it is accessed from outside the class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Data hiding:\"), \" Accessor methods ensure that the data in a class is hidden from external code, which helps to prevent accidental or malicious modification.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Validation of input:\"), \" Accessor methods can be used to validate input before returning the value of a private data member. This can help to ensure that the data is always in a valid state.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Flexibility:\"), \" Accessor methods can be modified without affecting the external code that uses them, which makes it easier to modify the implementation of a class without breaking existing code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Debugging:\"), \" Accessor methods can be used to add debugging information or perform additional actions (such as logging) when data is accessed.\")), mdx(\"p\", null, \"Overall, accessor methods are an important concept in OOP that help to provide encapsulation, data hiding, and control over the data in a class.\"), mdx(\"p\", null, \"Here's an example of a simple class that uses accessor methods (getter and setter) to access and modify a private data member:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Person {\\n  constructor(name, age) {\\n    this._name = name;\\n    this._age = age;\\n  }\\n\\n  // Getter method for name\\n  get name() {\\n    return this._name;\\n  }\\n\\n  // Setter method for name\\n  set name(newName) {\\n    this._name = newName;\\n  }\\n\\n  // Getter method for age\\n  get age() {\\n    return this._age;\\n  }\\n\\n  // Setter method for age\\n  set age(newAge) {\\n    if (newAge >= 0) {\\n      this._age = newAge;\\n    } else {\\n      console.log(\\\"Age cannot be negative\\\");\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" class has two private data members \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_name\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_age\"), \". It also has two accessor methods for each of these data members, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getter\"), \" and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setter\"), \". The getter methods return the value of the corresponding private data member, and the setter methods set the value of the private data member.\"), mdx(\"p\", null, \"Here's how you can use the accessor methods to access and modify the private data members of an instance of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" class:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// Create a new instance of Person\\nconst person = new Person(\\\"John\\\", 30);\\n\\n// Use the getter methods to retrieve the values of the private data members\\nconsole.log(person.name); // Output: John\\nconsole.log(person.age); // Output: 30\\n\\n// Use the setter methods to modify the values of the private data members\\nperson.name = \\\"Jane\\\";\\nperson.age = -10; // This will not modify the value of age because it's negative\\n\\n// Use the getter methods to retrieve the updated values of the private data members\\nconsole.log(person.name); // Output: Jane\\nconsole.log(person.age); // Output: 30 (unchanged because the input was negative)\\n\")), mdx(\"p\", null, \"In this example, we create a new instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" with the name \\\"John\\\" and age 30. We then use the getter methods to retrieve the values of the private data members, and the setter methods to modify the values of the private data members. Finally, we use the getter methods again to retrieve the updated values of the private data members.\"), mdx(\"h4\", null, \"Getters\"), mdx(\"p\", null, \"Getters are methods that are used to retrieve the value of a private data member of a class. The getter method typically has a return type that matches the data type of the private member it is retrieving. For example, if the private data member is an integer, the getter method would typically have an integer return type.\"), mdx(\"p\", null, \"Here's an example of a simple class that uses a getter method to access a private data member:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Person {\\n  constructor(name) {\\n    this._name = name;\\n  }\\n\\n  // Getter method for name\\n  get name() {\\n    return this._name;\\n  }\\n}\\n\")), mdx(\"p\", null, \"In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" class has one private data member \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_name\"), \". It also has a getter method for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_name\"), \" data member. The getter method returns the value of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_name\"), \" private data member.\"), mdx(\"p\", null, \"Here's how you can use the getter method to access the private data member of an instance of the Person class:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// Create a new instance of Person\\nconst person = new Person(\\\"John\\\");\\n\\n// Use the getter method to retrieve the value of the private data member\\nconsole.log(person.name); // Output: John\\n\")), mdx(\"p\", null, \"In this example, we create a new instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" with the name \\\"John\\\". We then use the getter method to retrieve the value of the private data member \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_name\"), \". The output will be \\\"John\\\".\"), mdx(\"h4\", null, \"Setters\"), mdx(\"p\", null, \"Setters, on the other hand, are methods that are used to modify the value of a private data member of a class. The setter method typically has a parameter that matches the data type of the private member it is modifying. For example, if the private data member is an integer, the setter method would typically have an integer parameter.\"), mdx(\"p\", null, \"Here's an example of a simple class that uses a setter method to modify a private data member:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Person {\\n  constructor(name) {\\n    this._name = name;\\n  }\\n\\n  // Setter method for name\\n  set name(newName) {\\n    this._name = newName;\\n  }\\n}\\n\")), mdx(\"p\", null, \"In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" class has one private data member \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_name\"), \". It also has a setter method for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_name\"), \" data member. The setter method sets the value of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_name\"), \" private data member to the input parameter newName.\"), mdx(\"p\", null, \"Here's how you can use the setter method to modify the private data member of an instance of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" class:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// Create a new instance of Person\\nconst person = new Person(\\\"John\\\");\\n\\n// Use the setter method to modify the value of the private data member\\nperson.name = \\\"Jane\\\";\\n\\n// Use the getter method to retrieve the updated value of the private data member\\nconsole.log(person.name); // Output: Jane\\n\")), mdx(\"p\", null, \"In this example, we create a new instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" with the name \\\"John\\\". We then use the setter method to modify the value of the private data member \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_name\"), \" to \\\"Jane\\\". Finally, we use the getter method to retrieve the updated value of the private data member. The output will be \\\"Jane\\\".\"), mdx(\"h2\", null, \"Inheritance\"), mdx(\"p\", null, \"Inheritance is a concept in object-oriented programming where one class (the child or derived class) can inherit properties and methods from another class (the parent or base class).\"), mdx(\"p\", null, \"The child class can access and use the properties and methods of the parent class without having to redefine them, which can save time and make the code more organized and easier to maintain. The child class can also add its own properties and methods, or override those inherited from the parent class.\"), mdx(\"p\", null, \"Inheritance can also create a hierarchy of classes, where each child class inherits from its parent class, and can itself be a parent class for another child class. This allows for more complex and specialized classes to be created while still maintaining a cohesive structure.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Here are some of the main benefits of inheritance:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Code reuse:\"), \" Inheritance allows us to reuse code that is common to multiple classes, reducing code duplication and making our programs more efficient and easier to maintain. We can define a base class with common properties and methods, and then create derived classes that inherit those properties and methods, adding or modifying them as needed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Polymorphism:\"), \" Inheritance allows us to create objects that can take on multiple forms, depending on their context. We can use a base class to define a variable or parameter, and then assign it to a derived class, allowing us to work with different types of objects in a more flexible and abstract way.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Encapsulation:\"), \" Inheritance allows us to hide the implementation details of a class from other classes, making it easier to maintain and modify the code. We can define a base class with private properties and methods, and then create derived classes that can access and modify those properties and methods through public or protected methods.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Modularity:\"), \" Inheritance allows us to organize our code into a logical hierarchy of classes, making it easier to understand and manage. We can group related classes together in a hierarchical structure, with each level of the hierarchy building on the previous one.\")), mdx(\"p\", null, \"Overall, inheritance is an important tool for creating flexible, modular, and maintainable code in object-oriented programming. It allows us to build complex systems from simpler components, and to create specialized classes that meet specific requirements while minimizing code duplication and maximizing code reuse.\"), mdx(\"h3\", null, \"Types of Inheritance\"), mdx(\"p\", null, \"There are several types of inheritance in object-oriented programming:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Single Inheritance:\"), \" In single inheritance, a subclass inherits from a single parent class. The subclass has access to all the attributes and methods of the parent class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Multiple Inheritance:\"), \" In multiple inheritance, a subclass inherits from more than one parent class. The subclass has access to all the attributes and methods of both parent classes. However, this type of inheritance can lead to complexity and potential conflicts, so it is not supported in all programming languages.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Multilevel Inheritance:\"), \" In multilevel inheritance, a subclass inherits from a parent class, which itself inherits from another parent class. This creates a hierarchical chain of inheritance.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Hierarchical Inheritance:\"), \" In hierarchical inheritance, multiple subclasses inherit from a single parent class. Each subclass has its own set of attributes and methods, but they all share the attributes and methods of the parent class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Hybrid Inheritance:\"), \" Hybrid inheritance is a combination of multiple inheritance and multilevel inheritance. It allows for the creation of complex class hierarchies with multiple levels and multiple parent classes.\")), mdx(\"p\", null, \"It is important to note that not all programming languages support all types of inheritance, and some may have additional types of inheritance not listed here. It is also important to use inheritance judiciously and avoid creating overly complex class hierarchies, which can make code difficult to understand and maintain.\"), mdx(\"h4\", null, \"Single Inheritance\"), mdx(\"p\", null, \"Single inheritance is a type of inheritance in object-oriented programming where a subclass (or derived class) inherits properties and behavior from a single parent class. The subclass can access and use all the public and protected attributes and methods of the parent class.\"), mdx(\"p\", null, \"In single inheritance, the subclass extends the functionality of the parent class by adding new methods and attributes or by overriding existing methods or attributes. The parent class, also known as the base class or superclass, serves as a blueprint for the subclass.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Animal {\\n  constructor(name) {\\n    this.name = name;\\n  }\\n\\n  speak() {\\n    console.log(`${this.name} makes a noise.`);\\n  }\\n}\\n\\nclass Dog extends Animal {\\n  constructor(name) {\\n    super(name);\\n  }\\n\\n  speak() {\\n    console.log(`${this.name} barks.`);\\n  }\\n}\\n\\nconst myDog = new Dog(\\\"Rufus\\\");\\nmyDog.speak(); // output: \\\"Rufus barks.\\\"\\n\")), mdx(\"p\", null, \"In this example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" is the parent class and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" is the subclass. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class extends the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class by using the extends keyword and calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"super()\"), \" to access the parent class constructor.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class has a constructor that takes a name parameter and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method that logs a message to the console. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class also has a constructor that takes a name parameter and overrides the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method with a specialized implementation that logs a bark message to the console.\"), mdx(\"p\", null, \"When the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myDog\"), \" instance is created using the new keyword, it inherits the name property from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class. When the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method is called on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myDog\"), \" instance, it executes the specialized implementation defined in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class, which logs a bark message to the console.\"), mdx(\"h4\", null, \"Multiple Inheritance\"), mdx(\"p\", null, \"Multiple inheritance is a type of inheritance in object-oriented programming where a subclass (or derived class) inherits properties and behavior from more than one parent class. In multiple inheritance, the subclass has access to all the public and protected attributes and methods of both parent classes.\"), mdx(\"p\", null, \"Multiple inheritance can be useful when a class needs to inherit properties and behavior from multiple sources. However, it can also lead to complexity and potential conflicts, especially if the parent classes have conflicting or overlapping attributes or methods.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// In JavaScript, since it doesn't natively support multiple inheritance, it can be achieved through mixins. A mixin is a class that contains a set of methods that can be added to another class.\\n\\nclass Animal {\\n  constructor(name) {\\n    this.name = name;\\n  }\\n\\n  speak() {\\n    console.log(`${this.name} makes a noise.`);\\n  }\\n}\\n\\nclass Mammal {\\n  constructor(numLegs) {\\n    this.numLegs = numLegs;\\n  }\\n\\n  run() {\\n    console.log(`This mammal runs on ${this.numLegs} legs.`);\\n  }\\n}\\n\\nclass Flying {\\n  constructor(canFly) {\\n    this.canFly = canFly;\\n  }\\n\\n  fly() {\\n    if (this.canFly) {\\n      console.log(`${this.name} flies.`);\\n    } else {\\n      console.log(`${this.name} cannot fly.`);\\n    }\\n  }\\n}\\n\\nclass Bat extends Animal {}\\nclass BatMammal extends MammalMixin(Bat) {}\\nclass BatMammalFlying extends FlyingMixin(BatMammal) {}\\n\\nfunction MammalMixin(Base) {\\n  return class extends Base {\\n    constructor(...args) {\\n      super(...args);\\n      this.numLegs = 4;\\n    }\\n  };\\n}\\n\\nfunction FlyingMixin(Base) {\\n  return class extends Base {\\n    constructor(...args) {\\n      super(...args);\\n      this.canFly = true;\\n    }\\n  };\\n}\\n\\nconst myBat = new BatMammalFlying(\\\"Batty\\\");\\nmyBat.speak(); // output: \\\"Batty makes a noise.\\\"\\nmyBat.run(); // output: \\\"This mammal runs on 4 legs.\\\"\\nmyBat.fly(); // output: \\\"Batty flies.\\\"\\n\\n\")), mdx(\"p\", null, \"In this example, we have three classes: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Mammal\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Flying\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" is the parent class of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Bat\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Mammal\"), \" is a mixin that adds numLegs and run() method to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Bat\"), \" class, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Flying\"), \" is another mixin that adds \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"canFly\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fly()\"), \" method to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BatMammal\"), \" class.\"), mdx(\"p\", null, \"We create the Bat class by extending the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class. Then, we create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BatMammal\"), \" class by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MammalMixin()\"), \" function that takes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Bat\"), \" as the base class and adds \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"numLegs\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"run()\"), \" method. Similarly, we create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BatMammalFlying\"), \" class by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FlyingMixin()\"), \" function that takes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BatMammal\"), \" as the base class and adds \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"canFly\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fly()\"), \" method.\"), mdx(\"p\", null, \"Finally, we create an instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BatMammalFlying\"), \" class named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myBat\"), \" and call its inherited methods \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"run()\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fly()\"), \". As a result, the output will be \\\"Batty makes a noise.\\\", \\\"This mammal runs on 4 legs.\\\", and \\\"Batty flies.\\\" respectively.\"), mdx(\"h4\", null, \"Multi-level Inheritance\"), mdx(\"p\", null, \"Multi-level inheritance is a type of inheritance where a class inherits from another class, and that class in turn inherits from another class. This creates a chain of inheritance, with each class inheriting properties and methods from its parent class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Vehicle {\\n  constructor(type, color) {\\n    this.type = type;\\n    this.color = color;\\n  }\\n\\n  drive() {\\n    console.log(`The ${this.color} ${this.type} is driving.`);\\n  }\\n}\\n\\nclass Car extends Vehicle {\\n  constructor(make, model, color) {\\n    super(\\\"car\\\", color);\\n    this.make = make;\\n    this.model = model;\\n  }\\n\\n  honk() {\\n    console.log(`The ${this.color} ${this.make} ${this.model} is honking.`);\\n  }\\n}\\n\\nclass SportsCar extends Car {\\n  constructor(make, model, color, topSpeed) {\\n    super(make, model, color);\\n    this.topSpeed = topSpeed;\\n  }\\n\\n  driveFast() {\\n    console.log(`The ${this.color} ${this.make} ${this.model} is driving at ${this.topSpeed} mph.`);\\n  }\\n}\\n\\nconst mySportsCar = new SportsCar(\\\"Ferrari\\\", \\\"458 Italia\\\", \\\"red\\\", 200);\\nmySportsCar.drive(); // output: \\\"The red car is driving.\\\"\\nmySportsCar.honk(); // output: \\\"The red Ferrari 458 Italia is honking.\\\"\\nmySportsCar.driveFast(); // output: \\\"The red Ferrari 458 Italia is driving at 200 mph.\\\"\\n\")), mdx(\"p\", null, \"In this example, we have three classes: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vehicle\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SportsCar\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vehicle\"), \" is the parent class of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" is the parent class of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SportsCar\"), \". Each class has its own set of properties and methods.\"), mdx(\"p\", null, \"We create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vehicle\"), \" class with properties type and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \", and a method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"drive()\"), \". Then, we create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" class by extending the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vehicle\"), \" class and adding properties make and model, and a method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"honk()\"), \". Finally, we create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SportsCar\"), \" class by extending the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" class and adding a property topSpeed and a method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"driveFast()\"), \".\"), mdx(\"p\", null, \"We create an instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SportsCar\"), \" class named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mySportsCar\"), \" and call its inherited methods \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"drive()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"honk()\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"driveFast()\"), \". As a result, the output will be \\\"The red car is driving.\\\", \\\"The red Ferrari 458 Italia is honking.\\\", and \\\"The red Ferrari 458 Italia is driving at 200 mph.\\\" respectively.\"), mdx(\"h4\", null, \"Hierarchical Inheritance\"), mdx(\"p\", null, \"Hierarchical inheritance is a type of inheritance where multiple child classes inherit from a single parent class. This creates a hierarchical tree structure where each child class shares common properties and methods inherited from the parent class, but also has its own unique properties and methods.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Animal {\\n  constructor(name) {\\n    this.name = name;\\n  }\\n\\n  eat() {\\n    console.log(`${this.name} is eating.`);\\n  }\\n\\n  sleep() {\\n    console.log(`${this.name} is sleeping.`);\\n  }\\n}\\n\\nclass Dog extends Animal {\\n  bark() {\\n    console.log(`${this.name} is barking.`);\\n  }\\n}\\n\\nclass Cat extends Animal {\\n  meow() {\\n    console.log(`${this.name} is meowing.`);\\n  }\\n}\\n\\nconst myDog = new Dog(\\\"Fido\\\");\\nconst myCat = new Cat(\\\"Whiskers\\\");\\n\\nmyDog.eat(); // output: \\\"Fido is eating.\\\"\\nmyDog.sleep(); // output: \\\"Fido is sleeping.\\\"\\nmyDog.bark(); // output: \\\"Fido is barking.\\\"\\n\\nmyCat.eat(); // output: \\\"Whiskers is eating.\\\"\\nmyCat.sleep(); // output: \\\"Whiskers is sleeping.\\\"\\nmyCat.meow(); // output: \\\"Whiskers is meowing.\\\"\\n\\n\")), mdx(\"p\", null, \"In this example, we have a parent class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" and two child classes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cat\"), \". Both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cat\"), \" inherit properties and methods from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \", such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eat()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sleep()\"), \", but they also have their own unique methods \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bark()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"meow()\"), \" respectively.\"), mdx(\"p\", null, \"We create an instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myDog\"), \" and an instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cat\"), \" class named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myCat\"), \", and call their inherited methods \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eat()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sleep()\"), \", and their unique methods \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bark()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"meow()\"), \" respectively. As a result, the output will be \\\"Fido is eating.\\\", \\\"Fido is sleeping.\\\", \\\"Fido is barking.\\\", \\\"Whiskers is eating.\\\", \\\"Whiskers is sleeping.\\\", and \\\"Whiskers is meowing.\\\" respectively.\"), mdx(\"h4\", null, \"Hybrid Inheritance\"), mdx(\"p\", null, \"Hybrid inheritance is a combination of multiple inheritance and single inheritance. In hybrid inheritance, a class can inherit properties and methods from multiple parent classes, as well as from a single parent class. This allows for a more complex and flexible inheritance structure.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Vehicle {\\n  constructor(type, color) {\\n    this.type = type;\\n    this.color = color;\\n  }\\n\\n  drive() {\\n    console.log(`The ${this.color} ${this.type} is driving.`);\\n  }\\n}\\n\\nclass Car extends Vehicle {\\n  constructor(make, model, color) {\\n    super(\\\"car\\\", color);\\n    this.make = make;\\n    this.model = model;\\n  }\\n\\n  honk() {\\n    console.log(`The ${this.color} ${this.make} ${this.model} is honking.`);\\n  }\\n}\\n\\nclass Boat extends Vehicle {\\n  constructor(name, color) {\\n    super(\\\"boat\\\", color);\\n    this.name = name;\\n  }\\n\\n  sail() {\\n    console.log(`The ${this.color} ${this.name} is sailing.`);\\n  }\\n}\\n\\nclass AmphibiousCar extends Car {\\n  constructor(make, model, color, name) {\\n    super(make, model, color);\\n    this.boat = new Boat(name, color);\\n  }\\n\\n  driveOnLand() {\\n    console.log(`The ${this.color} ${this.make} ${this.model} is driving on land.`);\\n  }\\n\\n  sailOnWater() {\\n    console.log(`The ${this.color} ${this.boat.name} is sailing on water.`);\\n  }\\n}\\n\\nconst myAmphibiousCar = new AmphibiousCar(\\\"Jeep\\\", \\\"Wrangler\\\", \\\"red\\\", \\\"Amphicar\\\");\\nmyAmphibiousCar.drive(); // output: \\\"The red car is driving.\\\"\\nmyAmphibiousCar.honk(); // output: \\\"The red Jeep Wrangler is honking.\\\"\\nmyAmphibiousCar.driveOnLand(); // output: \\\"The red Jeep Wrangler is driving on land.\\\"\\nmyAmphibiousCar.sailOnWater(); // output: \\\"The red Amphicar is sailing on water.\\\"\\n\\n\")), mdx(\"p\", null, \"In this example, we have four classes: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vehicle\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Boat\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AmphibiousCar\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vehicle\"), \" is the parent class of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Boat\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Boat\"), \" are parent classes of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AmphibiousCar\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AmphibiousCar\"), \" inherits properties and methods from both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Car\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Boat\"), \".\"), mdx(\"p\", null, \"We create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vehicle\"), \" class with properties type and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \", and a method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"drive()\"), \". Then, we create the Car class by extending the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vehicle\"), \" class and adding properties make and model, and a method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"honk()\"), \". We also create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Boat\"), \" class by extending the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Vehicle\"), \" class and adding a property name and a method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sail()\"), \".\"), mdx(\"p\", null, \"Finally, we create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AmphibiousCar\"), \" class by extending the Car class and adding a property boat that is an instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Boat\"), \" class. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AmphibiousCar\"), \" also has its own methods \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"driveOnLand()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sailOnWater()\"), \".\"), mdx(\"p\", null, \"We create an instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AmphibiousCar\"), \" class named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myAmphibiousCar\"), \" and call its inherited methods \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"drive()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"honk()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"driveOnLand()\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sailOnWater()\"), \". As a result, the output will be \\\"The red car is driving.\\\", \\\"The red Jeep Wrangler is honking.\\\", \\\"The red Jeep Wrangler is driving on land.\\\",\"), mdx(\"h3\", null, \"Base Classes and Derived Classes\"), mdx(\"p\", null, \"In object-oriented programming, a base class is a class that serves as a starting point for creating other classes. A base class contains common properties and methods that can be shared by its derived classes. A derived class is a class that is created by inheriting properties and methods from a base class.\"), mdx(\"p\", null, \"For example, consider the following code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Animal {\\n  constructor(name) {\\n    this.name = name;\\n  }\\n\\n  eat() {\\n    console.log(`${this.name} is eating.`);\\n  }\\n}\\n\\nclass Dog extends Animal {\\n  constructor(name, breed) {\\n    super(name);\\n    this.breed = breed;\\n  }\\n\\n  bark() {\\n    console.log(`${this.name} is barking.`);\\n  }\\n}\\n\\nlet myDog = new Dog(\\\"Fido\\\", \\\"Labrador Retriever\\\");\\nmyDog.eat(); // output: \\\"Fido is eating.\\\"\\nmyDog.bark(); // output: \\\"Fido is barking.\\\"\\n\")), mdx(\"p\", null, \"In this example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" is the base class, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" is the derived class. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" inherits the properties and methods from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" using the extends keyword.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class has a constructor that takes a name parameter and assigns it to the name property. It also has an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eat()\"), \" method that logs a message to the console.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class has a constructor that takes a name and a breed parameter. It calls the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"super()\"), \" method to pass the name parameter to the constructor of the base class. It also has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bark()\"), \" method that logs a message to the console.\"), mdx(\"p\", null, \"We create an instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myDog\"), \" and call its inherited methods \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eat()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bark()\"), \". As a result, the output will be \\\"Fido is eating.\\\" and \\\"Fido is barking.\\\".\"), mdx(\"p\", null, \"In this example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" is the base class and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" is the derived class, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" inherits the properties and methods from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \". This allows us to reuse the common functionality defined in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class and add new functionality specific to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class.\"), mdx(\"h4\", null, \"Base Classes\"), mdx(\"p\", null, \"In object-oriented programming, a base class is a class that serves as a starting point for creating other classes. It is also known as a superclass, parent class, or generalization. A base class contains common properties and methods that can be shared by its derived classes. Derived classes inherit the properties and methods of the base class, and can also add or modify them as needed.\"), mdx(\"p\", null, \"The main purpose of a base class is to define the common behavior and attributes of a group of related classes, and to provide a blueprint for creating new classes. By defining a set of common properties and methods in a base class, we can avoid duplicating code in multiple derived classes, and make our programs more efficient and easier to maintain.\"), mdx(\"p\", null, \"For example, consider the following code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Shape {\\n  constructor(x, y) {\\n    this.x = x;\\n    this.y = y;\\n  }\\n\\n  move(x, y) {\\n    this.x += x;\\n    this.y += y;\\n  }\\n}\\n\\nclass Circle extends Shape {\\n  constructor(x, y, r) {\\n    super(x, y);\\n    this.r = r;\\n  }\\n\\n  area() {\\n    return Math.PI * this.r * this.r;\\n  }\\n}\\n\\nclass Rectangle extends Shape {\\n  constructor(x, y, w, h) {\\n    super(x, y);\\n    this.w = w;\\n    this.h = h;\\n  }\\n\\n  area() {\\n    return this.w * this.h;\\n  }\\n}\\n\\nlet myCircle = new Circle(10, 20, 5);\\nlet myRect = new Rectangle(30, 40, 10, 20);\\n\\nmyCircle.move(5, 5);\\nmyRect.move(-5, -5);\\n\\nconsole.log(myCircle.x, myCircle.y); // output: 15, 25\\nconsole.log(myRect.x, myRect.y); // output: 25, 35\\n\")), mdx(\"p\", null, \"In this example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \" is the base class, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Circle\"), \" and Rectangle are derived classes. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Circle\"), \" and Rectangle inherit the move() method from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \", which allows them to move to a new position on the x-y plane. They also define their own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"area()\"), \" method, which calculates the area of the circle or rectangle.\"), mdx(\"p\", null, \"We create instances of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Circle\"), \" and Rectangle classes named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myCircle\"), \" and myRect, respectively, and call their inherited move() methods to move them to a new position. As a result, the output will be (15, 25) for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myCircle\"), \", and (25, 35) for myRect.\"), mdx(\"p\", null, \"In this example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \" is the base class, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Circle\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Rectangle\"), \" are derived classes, and they both inherit the properties and methods from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \". This allows us to reuse the common functionality defined in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \" class and add new functionality specific to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Circle\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Rectangle\"), \" classes.\"), mdx(\"h4\", null, \"Derived Classes\"), mdx(\"p\", null, \"In object-oriented programming, a derived class is a class that inherits properties and methods from a base class or superclass. It is also known as a subclass or child class. A derived class extends the functionality of its base class, by adding new properties and methods, modifying existing ones, or overriding them completely.\"), mdx(\"p\", null, \"The main purpose of a derived class is to create a new class that is similar to an existing class, but with some modifications or additional features. By inheriting from a base class, a derived class can reuse the code that is already defined in the base class, and focus on adding or modifying the functionality that is specific to the derived class.\"), mdx(\"p\", null, \"For example, consider the following code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Animal {\\n  constructor(name, age) {\\n    this.name = name;\\n    this.age = age;\\n  }\\n\\n  eat() {\\n    console.log(`${this.name} is eating.`);\\n  }\\n}\\n\\nclass Dog extends Animal {\\n  constructor(name, age, breed) {\\n    super(name, age);\\n    this.breed = breed;\\n  }\\n\\n  bark() {\\n    console.log(`${this.name} is barking.`);\\n  }\\n}\\n\\nlet myDog = new Dog(\\\"Rex\\\", 3, \\\"Labrador\\\");\\n\\nmyDog.eat(); // output: Rex is eating.\\nmyDog.bark(); // output: Rex is barking.\\nconsole.log(myDog.age); // output: 3\\n\")), mdx(\"p\", null, \"In this example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" is the base class, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" is the derived class.   inherits the name and age properties, and the eat() method from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \".   also defines its own bark() method, which is specific to dogs. We create an instance of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myDog\"), \", and call its inherited \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eat()\"), \" method and its own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bark()\"), \" method.\"), mdx(\"p\", null, \"As a result, the output will be Rex is eating. and Rex is barking.. We can also access the age property of myDog, which is inherited from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \".\"), mdx(\"p\", null, \"In this example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" is the derived class, and it extends the functionality of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" by adding a new method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bark()\"), \". This allows us to reuse the common functionality defined in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class and add new functionality specific to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class.\"), mdx(\"h3\", null, \"Overriding methods and properties\"), mdx(\"p\", null, \"In object-oriented programming, overriding is the ability of a derived class to provide its own implementation of a method or property that is already defined in its base class. This allows the derived class to change or extend the behavior of the inherited method or property, without modifying the base class.\"), mdx(\"p\", null, \"To override a method or property in a derived class, we simply define a method or property with the same name as the one in the base class. When an object of the derived class calls the method or property, it will call the overridden version instead of the one defined in the base class.\"), mdx(\"p\", null, \"For example, consider the following code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Animal {\\n  constructor(name) {\\n    this.name = name;\\n  }\\n\\n  speak() {\\n    console.log(`${this.name} makes a sound.`);\\n  }\\n}\\n\\nclass Dog extends Animal {\\n  constructor(name) {\\n    super(name);\\n  }\\n\\n  speak() {\\n    console.log(`${this.name} barks.`);\\n  }\\n}\\n\\nlet myDog = new Dog(\\\"Rex\\\");\\n\\nmyDog.speak(); // output: Rex barks.\\n\")), mdx(\"p\", null, \"In this example, both the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" classes define a speak() method. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class overrides the speak() method defined in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class with its own implementation that outputs \\\"Rex barks.\\\" When we call speak() on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myDog\"), \" instance, it calls the overridden \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method defined in the `Dog`` class.\"), mdx(\"p\", null, \"We can also override properties in a similar way by defining a property with the same name as the one in the base class. When we access the property on an object of the derived class, it will return the value of the overridden property.\"), mdx(\"p\", null, \"For example, consider the following code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Animal {\\n  constructor(name, age) {\\n    this.name = name;\\n    this.age = age;\\n  }\\n\\n  get description() {\\n    return `${this.name} is ${this.age} years old.`;\\n  }\\n}\\n\\nclass Dog extends Animal {\\n  constructor(name, age, breed) {\\n    super(name, age);\\n    this.breed = breed;\\n  }\\n\\n  get description() {\\n    return `${this.name} is a ${this.breed} and is ${this.age} years old.`;\\n  }\\n}\\n\\nlet myDog = new Dog(\\\"Rex\\\", 3, \\\"Labrador\\\");\\n\\nconsole.log(myDog.description); // output: Rex is a Labrador and is 3 years old.\\n\\n\")), mdx(\"p\", null, \"In this example, both the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" classes define a description property. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class overrides the description property defined in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class with its own implementation that adds the breed information to the description. When we access the description property on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myDog\"), \" instance, it returns the overridden description property defined in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class.\"), mdx(\"h3\", null, \"Hiding methods and properties\"), mdx(\"p\", null, \"In object-oriented programming, hiding is the ability of a class to prevent its methods or properties from being accessed or overridden by derived classes. This is often done to enforce encapsulation and ensure that the internal workings of the class are not exposed to external code.\"), mdx(\"p\", null, \"To hide a method or property in a class, we can use the private or protected access modifiers in some programming languages. In JavaScript, however, we do not have explicit access modifiers, but we can achieve similar results by using closures and other techniques.\"), mdx(\"p\", null, \"For example, consider the following code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Person {\\n  constructor(name, age) {\\n    this.name = name;\\n    this.age = age;\\n  }\\n\\n  sayName() {\\n    console.log(`My name is ${this.name}.`);\\n  }\\n\\n  sayAge() {\\n    console.log(`I am ${this.age} years old.`);\\n  }\\n\\n  #greet() {\\n    console.log(`Hello, I'm ${this.name}!`);\\n  }\\n}\\n\\nclass Student extends Person {\\n  constructor(name, age, grade) {\\n    super(name, age);\\n    this.grade = grade;\\n  }\\n\\n  sayGrade() {\\n    console.log(`I am in grade ${this.grade}.`);\\n  }\\n\\n  sayGreeting() {\\n    // call the private method of the base class\\n    this.#greet();\\n  }\\n}\\n\\nlet john = new Student(\\\"John\\\", 15, 9);\\n\\njohn.sayName(); // output: My name is John.\\njohn.sayAge(); // output: I am 15 years old.\\njohn.sayGrade(); // output: I am in grade 9.\\njohn.sayGreeting(); // output: Hello, I'm John!\\n\\n\")), mdx(\"p\", null, \"In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" class has a private method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#greet()\"), \" that is not accessible from outside the class, including derived classes. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Student\"), \" class, however, has a public method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sayGreeting()\"), \" that calls the private method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#greet()\"), \" of the base class, effectively accessing a hidden method of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" class.\"), mdx(\"p\", null, \"Note that the private method is defined using the\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#\"), \" symbol before the method name. This is a new feature introduced in ECMAScript 2019, and it allows us to define private methods and properties in classes. However, this feature is not yet supported in all browsers and environments, so it may not be suitable for all projects. Alternatively, we can use closures and other techniques to achieve similar results in JavaScript.\"), mdx(\"h3\", null, \"Accessing base class members\"), mdx(\"p\", null, \"In object-oriented programming, accessing base class members from a derived class allows the derived class to inherit and use the properties and methods defined in the base class. This can be useful when we want to reuse code and extend the functionality of an existing class.\"), mdx(\"p\", null, \"To access base class members from a derived class, we use the super keyword in most object-oriented programming languages. In JavaScript, we use the super keyword to call the constructor and methods of the base class.\"), mdx(\"p\", null, \"Here is an example of accessing base class members in JavaScript:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Animal {\\n  constructor(name) {\\n    this.name = name;\\n  }\\n  \\n  speak() {\\n    console.log(this.name + ' makes a noise.');\\n  }\\n}\\n\\nclass Dog extends Animal {\\n  constructor(name) {\\n    super(name);\\n  }\\n\\n  speak() {\\n    super.speak(); // call the base class method\\n    console.log(this.name + ' barks.');\\n  }\\n}\\n\\nlet dog = new Dog('Rex');\\ndog.speak(); // output: Rex makes a noise. Rex barks.\\n\\n\")), mdx(\"p\", null, \"In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class inherits from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class using the extends keyword. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class overrides the speak method of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class, but it also calls the speak method of the base class using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"super.speak()\"), \" statement. This allows the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class to reuse the code of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class and add additional functionality.\"), mdx(\"p\", null, \"Note that we use the super keyword to call both the constructor and methods of the base class. In the constructor, we use super(name) to call the constructor of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class with the name parameter. In the speak method, we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"super.speak()\"), \" to call the speak method of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class.\"), mdx(\"h3\", null, \"Cyclic Inheritance\"), mdx(\"p\", null, \"Cyclic inheritance, also known as circular inheritance, is a situation where two or more classes inherit from each other directly or indirectly, forming a cycle. This means that each class in the cycle is both a base class and a derived class, leading to a situation that is logically and practically impossible.\"), mdx(\"p\", null, \"Cyclic inheritance can occur in object-oriented programming when programmers are not careful with their class designs. \"), mdx(\"p\", null, \"It can lead to a range of issues, including:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Infinite loops:\"), \" When two classes inherit from each other, an infinite loop can occur when accessing properties or methods of the classes. This can cause the program to crash or hang.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Code complexity:\"), \" Cyclic inheritance can make the code more complex and difficult to understand, especially for new developers who are not familiar with the codebase.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Maintenance issues:\"), \" Any changes made to a class in a cyclic inheritance hierarchy can have unintended consequences on other classes in the cycle, making it difficult to maintain and debug.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To avoid cyclic inheritance, it is important to design classes with a clear hierarchy and avoid mutual inheritance relationships. In case there is a need for sharing functionality between two or more classes, it is better to use composition, where one class contains an instance of another class and delegates functionality to it.\")), mdx(\"p\", null, \"Here is an example of cyclic inheritance in JavaScript:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class A extends B {\\n}\\n\\nclass B extends A {\\n}\\n\")), mdx(\"p\", null, \"In this example, class A extends class B and class B extends class A, creating a cycle that is logically impossible.\"), mdx(\"h2\", null, \"Polymorphism\"), mdx(\"p\", null, \"Polymorphism is a fundamental concept in object-oriented programming (OOP) that refers to the ability of an object or method to take on many forms. More specifically, polymorphism allows objects of different classes to be treated as if they were of the same type, and for methods of different classes to have the same name but different behavior.\"), mdx(\"p\", null, \"Polymorphism is achieved through inheritance, where a subclass inherits properties and methods from its superclass and can also have its own unique properties and methods. There are three main types of polymorphism: method overloading, method overriding, and method hiding.\"), mdx(\"p\", null, \"Method overloading occurs when a class has multiple methods with the same name but different parameters. Method overriding occurs when a subclass provides a specific implementation of a method that is already defined in its superclass. Method hiding occurs when a subclass defines a static method with the same name and signature as a static method in its superclass.\"), mdx(\"p\", null, \"Polymorphism also involves concepts such as method signature, object typecasting, virtual and abstract methods, and late binding and early binding. These concepts are important to understand in order to effectively use and implement polymorphism in OOP.\"), mdx(\"p\", null, \"Overall, polymorphism is a powerful tool in OOP that allows for greater flexibility, modularity, and code reuse.\"), mdx(\"p\", null, \"In JavaScript, polymorphism can be achieved through method overloading and method overriding. Here's an example of method overriding:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Animal {\\n  speak() {\\n    console.log(\\\"This is an animal speaking.\\\");\\n  }\\n}\\n\\nclass Cat extends Animal {\\n  speak() {\\n    console.log(\\\"Meow!\\\");\\n  }\\n}\\n\\nclass Dog extends Animal {\\n  speak() {\\n    console.log(\\\"Woof!\\\");\\n  }\\n}\\n\\nlet cat = new Cat();\\nlet dog = new Dog();\\n\\ncat.speak(); // Output: \\\"Meow!\\\"\\ndog.speak(); // Output: \\\"Woof!\\\"\\n\")), mdx(\"p\", null, \"In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method, which is then overridden in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cat\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" subclasses. When the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method is called on an instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cat\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \", the overridden implementation is executed, demonstrating polymorphism.\"), mdx(\"h3\", null, \"Types of Polymorphism\"), mdx(\"p\", null, \"There are three types of polymorphism in object-oriented programming:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Method Overloading\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Method Overriding\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Method Hiding\")), mdx(\"h4\", null, \"Method Overloading\"), mdx(\"p\", null, \"Method overloading allows multiple methods in the same class to have the same name, but different parameters. The method that is called depends on the number, types, and order of the arguments passed to it. In JavaScript, method overloading is not supported natively, but it can be emulated using conditional statements to check the number of arguments passed and their types.\"), mdx(\"p\", null, \"Method overloading is a concept in object-oriented programming where a class has multiple methods with the same name but different parameters. The appropriate method is selected based on the number, type, and order of arguments passed to it.\"), mdx(\"p\", null, \"In JavaScript, there is no native support for method overloading, but it can be simulated using a combination of conditional statements and optional parameters.\"), mdx(\"p\", null, \"Here's an example of method overloading in JavaScript:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Calculator {\\n  add(x, y) {\\n    return x + y;\\n  }\\n\\n  add(x, y, z) {\\n    return x + y + z;\\n  }\\n}\\n\\nconst calculator = new Calculator();\\nconsole.log(calculator.add(1, 2));      // Output: NaN (since the second add method overwrites the first one)\\nconsole.log(calculator.add(1, 2, 3));   // Output: 6\\n\\n\")), mdx(\"p\", null, \"In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Calculator\"), \" class has two add methods with different numbers of parameters. However, since JavaScript does not support method overloading, the second add method overwrites the first one, and calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"calculator.add(1, 2)\"), \" will result in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NaN\"), \" being returned.\"), mdx(\"p\", null, \"To simulate method overloading in JavaScript, we can use optional parameters and conditional statements to check the number and types of arguments passed to the method. Here's an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Calculator {\\n  add(x, y, z) {\\n    if (z === undefined) {\\n      return x + y;\\n    } else {\\n      return x + y + z;\\n    }\\n  }\\n}\\n\\nconst calculator = new Calculator();\\nconsole.log(calculator.add(1, 2));      // Output: 3\\nconsole.log(calculator.add(1, 2, 3));   // Output: 6\\n\\n\")), mdx(\"p\", null, \"In this example, the add method takes three parameters, but the third one is optional. If the third parameter is not passed to the method, the method behaves like the first add method in the previous example, and returns the sum of the first two parameters. If the third parameter is passed to the method, it behaves like the second add method in the previous example, and returns the sum of all three parameters.\"), mdx(\"h4\", null, \"Method Overriding\"), mdx(\"p\", null, \"Method overriding allows a subclass to provide its own implementation of a method that is already defined in its superclass. When the overridden method is called on an object of the subclass, the subclass's implementation is executed instead of the superclass's implementation. In JavaScript, method overriding is achieved by defining a method with the same name in the subclass that shadows the method in the superclass.\"), mdx(\"p\", null, \"Method overriding is a feature in object-oriented programming where a subclass provides its own implementation of a method that is already provided by its parent class. When a method is called on an object of the subclass, the overridden method in the subclass is called instead of the method in the parent class.\"), mdx(\"p\", null, \"In JavaScript, method overriding can be achieved using prototype inheritance. We can define a method on the parent class's prototype, and then define a method with the same name on the subclass's prototype to override it.\"), mdx(\"p\", null, \"Here is an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// Parent class\\nclass Animal {\\n  constructor(name) {\\n    this.name = name;\\n  }\\n  \\n  speak() {\\n    console.log(this.name + ' makes a noise.');\\n  }\\n}\\n\\n// Subclass\\nclass Dog extends Animal {\\n  speak() {\\n    console.log(this.name + ' barks.');\\n  }\\n}\\n\\nlet animal = new Animal('Animal');\\nlet dog = new Dog('Dog');\\n\\nanimal.speak(); // Output: Animal makes a noise.\\ndog.speak();    // Output: Dog barks.\\n\")), mdx(\"p\", null, \"In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class defines a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method that simply logs a message to the console. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" subclass extends the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class and overrides the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method with its own implementation that logs a different message.\"), mdx(\"p\", null, \"When we create an object of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class and call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method on it, it outputs  \\\"Animal makes a noise.\\\"  But when we create an object of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class and call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method on it, it outputs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"Dog barks.\\\"\"), \" This is because the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" subclass has overridden the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method in the Animal class.\"), mdx(\"h4\", null, \"Method Hiding\"), mdx(\"p\", null, \"Method hiding allows a subclass to provide its own implementation of a static method that is already defined in its superclass. When the static method is called on the subclass, the subclass's implementation is executed instead of the superclass's implementation. In JavaScript, method hiding is achieved by defining a static method with the same name in the subclass that shadows the static method in the superclass. However, since JavaScript does not have native support for static methods, this type of polymorphism is not commonly used.\"), mdx(\"p\", null, \"Method hiding is a concept in object-oriented programming where a subclass provides a new implementation for a method that is already defined in its superclass, effectively hiding the original implementation of the method.\"), mdx(\"p\", null, \"In JavaScript, method hiding is achieved using the static keyword. A static method is a method that is associated with the class itself rather than with instances of the class. When a subclass defines a static method with the same name as a static method in its superclass, the new method effectively hides the original method.\"), mdx(\"p\", null, \"Here's an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Animal {\\n  static sayHello() {\\n    console.log(\\\"Hello from Animal\\\");\\n  }\\n}\\n\\nclass Dog extends Animal {\\n  static sayHello() {\\n    console.log(\\\"Hello from Dog\\\");\\n  }\\n}\\n\\nAnimal.sayHello(); // outputs \\\"Hello from Animal\\\"\\nDog.sayHello(); // outputs \\\"Hello from Dog\\\"\\n\\n\")), mdx(\"p\", null, \"In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class defines a static method called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sayHello()\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class extends \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" and also defines a static method called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sayHello()\"), \". When we call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \".\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sayHello()\"), \", the output is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"Hello from Animal\\\"\"), \", because the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class defines the original implementation of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sayHello()\"), \". However, when we call Dog.\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sayHello()\"), \", the output is \\\"Hello from Dog\\\", because the Dog class provides a new implementation of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sayHello()\"), \" that effectively hides the original implementation from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \".\"), mdx(\"h3\", null, \"Method Signature\"), mdx(\"p\", null, \"In object-oriented programming, the method signature refers to the combination of a method's name and its parameters. It is essentially the unique identifier of a method within a class, and it distinguishes it from other methods that may have the same name but different parameters.\"), mdx(\"p\", null, \"The method signature includes the method's name, as well as the number, types, and order of its parameters. \"), mdx(\"p\", null, \"In object-oriented programming, a method signature refers to the combination of the method name and its parameter list. It specifies the input and output of the method and distinguishes it from other methods with the same name but different parameters.\"), mdx(\"p\", null, \"Here's an example of a method signature in JavaScript:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"function addNumbers(num1, num2) {\\n  return num1 + num2;\\n}\\n\")), mdx(\"p\", null, \"In this example, the method name is addNumbers and its signature includes the two parameters num1 and num2. The signature of this method tells us that it expects two arguments of type number and returns a value of type number.\"), mdx(\"p\", null, \"If we were to define another method with the same name, but a different number or type of parameters, it would have a different signature and would be considered a different method:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"function addNumbers(num1, num2, num3) {\\n  return num1 + num2 + num3;\\n}\\n\")), mdx(\"p\", null, \"In this example, we have overloaded the addNumbers method by adding a third parameter. Now, depending on the number of arguments passed in, the method will behave differently. This demonstrates the concept of method overloading, a type of polymorphism.\"), mdx(\"p\", null, \"The method signature is used by the compiler to resolve method calls at compile-time, based on the number and types of arguments passed to the method. It is also used in dynamic binding, where the correct method implementation is determined at runtime based on the actual type of the object being used, rather than its declared type.\"), mdx(\"p\", null, \"In summary, the method signature is an important part of a method's identity within a class, and it is used by the compiler to ensure type safety and by the runtime environment to support polymorphism.\"), mdx(\"h3\", null, \"Overriding vs. Overloading\"), mdx(\"p\", null, \"Overriding and overloading are two important concepts in object-oriented programming languages, such as Java and C++. They both involve the use of methods, but they serve different purposes.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Method Overriding:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Method overriding occurs when a subclass provides its own implementation of a method that is already defined in its superclass.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The method in the subclass must have the same name, return type, and parameters (the method signature) as the one in the superclass.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When the method is called on an object of the subclass, the subclass implementation is executed instead of the superclass implementation.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Method overriding is used to change the behavior of a method for a particular subclass, while still maintaining the general contract of the method defined in the superclass.\")), mdx(\"p\", null, \"Example of method overriding in JavaScript:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Animal {\\n  makeSound() {\\n    console.log(\\\"The animal makes a sound\\\");\\n  }\\n}\\n\\nclass Cat extends Animal {\\n  makeSound() {\\n    console.log(\\\"Meow\\\");\\n  }\\n}\\n\\nlet animal = new Animal();\\nanimal.makeSound(); // outputs \\\"The animal makes a sound\\\"\\n\\nlet cat = new Cat();\\ncat.makeSound(); // outputs \\\"Meow\\\"\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Method Overloading:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Method overloading occurs when a class has multiple methods with the same name, but different parameters.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The methods must differ in the number, order, or type of their parameters.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When a method is called, the appropriate version of the method is selected based on the number and types of the arguments provided.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Method overloading is used to provide multiple ways to call a method, with different behaviors based on the arguments.\")), mdx(\"p\", null, \"Example of method overloading in JavaScript:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Calculator {\\n  add(a, b) {\\n    return a + b;\\n  }\\n\\n  add(a, b, c) {\\n    return a + b + c;\\n  }\\n}\\n\\nlet calc = new Calculator();\\nconsole.log(calc.add(1, 2)); // outputs NaN (the second add method overwrote the first one)\\nconsole.log(calc.add(1, 2, 3)); // outputs 6\\n\\n\")), mdx(\"p\", null, \"Note that method overloading is not directly supported in JavaScript, since it does not allow methods with the same name and different parameters. The example above illustrates how method overloading might be attempted in JavaScript, but it is not a recommended practice.\"), mdx(\"h3\", null, \"Object Typecasting\"), mdx(\"p\", null, \"In object-oriented programming, typecasting is the process of converting an object from one data type to another. In JavaScript, objects can be dynamically typed, which means that their type can change during runtime. Therefore, typecasting is not explicitly supported in JavaScript as it is in statically typed languages.\"), mdx(\"p\", null, \"However, there are some ways to achieve typecasting in JavaScript using built-in functions or methods. One way to do this is by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Object.assign()\"), \" method to create a new object that has the properties and methods of the original object but is of a different type.\"), mdx(\"p\", null, \"For example, consider the following code snippet:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"let animal = {\\n  type: 'mammal',\\n  speak: function() {\\n    console.log('The animal makes a sound');\\n  }\\n};\\n\\nlet dog = Object.assign({}, animal, {\\n  type: 'canine',\\n  speak: function() {\\n    console.log('The dog barks');\\n  }\\n});\\n\\nconsole.log(animal.type); // Output: \\\"mammal\\\"\\nconsole.log(dog.type); // Output: \\\"canine\\\"\\n\\nanimal.speak(); // Output: \\\"The animal makes a sound\\\"\\ndog.speak(); // Output: \\\"The dog barks\\\"\\n\")), mdx(\"p\", null, \"In this example, we have an object animal that has a property type and a method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \". We then use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Object.assign()\"), \" method to create a new object dog that has the same properties and methods as animal, but with a different type and a different implementation of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method.\"), mdx(\"p\", null, \"Another way to achieve typecasting in JavaScript is by using the instanceof operator to check if an object is an instance of a particular class or data type. This can be useful when you want to check the type of an object before using it in a certain context.\"), mdx(\"p\", null, \"For example, consider the following code snippet:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"function Animal(type) {\\n  this.type = type;\\n}\\n\\nAnimal.prototype.speak = function() {\\n  console.log('The animal makes a sound');\\n};\\n\\nfunction Dog(type) {\\n  Animal.call(this, type);\\n}\\n\\nDog.prototype = Object.create(Animal.prototype);\\nDog.prototype.constructor = Dog;\\n\\nDog.prototype.speak = function() {\\n  console.log('The dog barks');\\n};\\n\\nlet animal = new Animal('mammal');\\nlet dog = new Dog('canine');\\n\\nconsole.log(animal instanceof Animal); // Output: true\\nconsole.log(dog instanceof Animal); // Output: true\\nconsole.log(dog instanceof Dog); // Output: true\\n\\n\")), mdx(\"p\", null, \"In this example, we have two constructor functions \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \", which create objects of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \", respectively. We use the instanceof operator to check if an object is an instance of a particular class, which can be useful when we want to perform different operations on objects of different types.\"), mdx(\"h3\", null, \"Virtual and Abstract Methods\"), mdx(\"h4\", null, \"Virtual Methods\"), mdx(\"p\", null, \"A virtual method is a method that can be overridden by a derived class. This means that a subclass can provide its own implementation of the method, which will be used instead of the implementation provided by the base class. In order to mark a method as virtual in JavaScript, you can use the virtual keyword.\"), mdx(\"p\", null, \"Here's an example of a virtual method in JavaScript:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Animal {\\n  virtual speak() {\\n    console.log(\\\"The animal makes a noise.\\\");\\n  }\\n}\\n\\nclass Dog extends Animal {\\n  speak() {\\n    console.log(\\\"The dog barks.\\\");\\n  }\\n}\\n\\nlet myAnimal = new Animal();\\nlet myDog = new Dog();\\n\\nmyAnimal.speak(); // The animal makes a noise.\\nmyDog.speak(); // The dog barks.\\n\\n\")), mdx(\"p\", null, \"In this example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" is the base class and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" is the derived class. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method is marked as virtual in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class, which means that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class can override it with its own implementation. When we create an instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" and call the speak() method, we get the base implementation. But when we create an instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" and call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method, we get the overridden implementation.\"), mdx(\"h4\", null, \"Abstract Method\"), mdx(\"p\", null, \"An abstract method, on the other hand, is a method that is declared in a base class but doesn't provide an implementation. The implementation is left to the derived classes, which must override the abstract method in order to provide a concrete implementation. Abstract methods are used to define a common interface for a group of related classes.\"), mdx(\"p\", null, \"In JavaScript, there is no explicit way to define an abstract method, but you can simulate it by throwing an error if the method is called without being overridden. Here's an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Animal {\\n  speak() {\\n    throw new Error(\\\"Abstract method called\\\");\\n  }\\n}\\n\\nclass Dog extends Animal {\\n  speak() {\\n    console.log(\\\"The dog barks.\\\");\\n  }\\n}\\n\\nlet myAnimal = new Animal(); // Throws an error\\nlet myDog = new Dog();\\n\\nmyDog.speak(); // The dog barks.\\n\")), mdx(\"p\", null, \"In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class has an abstract \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method that throws an error if it is called without being overridden. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" class provides an implementation of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method, so it can be instantiated without any errors. When we call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" instance, we get the overridden implementation. If we try to call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"speak()\"), \" method on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" instance, we get an error because the abstract method hasn't been overridden.\"), mdx(\"h3\", null, \"Late Binding and Early Binding\"), mdx(\"p\", null, \"In object-oriented programming, binding refers to the process of associating a method call with the appropriate method implementation. Late binding and early binding are two different ways of performing this association.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Late binding\"), \", also known as dynamic binding, is the process of linking a method call to the appropriate method implementation at runtime. This means that the method to be called is determined at runtime based on the actual type of the object. Late binding is more flexible than early binding because it allows the method implementation to be dynamically changed based on the type of the object. However, it is typically slower than early binding because the method call must be resolved at runtime.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Early binding\"), \", also known as static binding, is the process of linking a method call to the appropriate method implementation at compile time. This means that the method to be called is determined at compile time based on the declared type of the object. Early binding is typically faster than late binding because the method call is resolved at compile time, rather than at runtime. However, it is less flexible than late binding because it cannot dynamically change the method implementation based on the type of the object.\"), mdx(\"p\", null, \"In JavaScript, all function calls are dynamically bound, which means that they use late binding. This means that the function to be called is determined at runtime, based on the type of the object being operated on.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Shape {\\n  draw() {\\n    console.log('Drawing a shape');\\n  }\\n}\\n\\nclass Circle extends Shape {\\n  draw() {\\n    console.log('Drawing a circle');\\n  }\\n}\\n\\nlet s = new Shape();\\nlet c = new Circle();\\n\\ns.draw(); // Output: Drawing a shape\\nc.draw(); // Output: Drawing a circle\\n\\nlet sc = new Shape();\\nsc = c;\\n\\nsc.draw(); // Output: Drawing a circle\\n\")), mdx(\"p\", null, \"In this example, we have a base class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \" and a derived class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Circle\"), \". Both classes have a draw() method that outputs a message to the console.\"), mdx(\"p\", null, \"When we create an instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Circle\"), \", and call their \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"draw()\"), \" methods, we get the expected output of \\\"Drawing a shape\\\" and \\\"Drawing a circle\\\".\"), mdx(\"p\", null, \"However, when we create a new instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \" and then assign it to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Circle\"), \" instance c, and then call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"draw()\"), \" on the new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \" instance, we get \\\"Drawing a circle\\\" as the output. This is because the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \" reference sc points to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Circle\"), \" instance c, and so the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"draw()\"), \" method is dynamically bound to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Circle\"), \" implementation at runtime.\"), mdx(\"p\", null, \"Thus, we can see that JavaScript uses late binding to resolve function calls based on the runtime type of the object being operated on.\"), mdx(\"p\", null, \"As for early binding, it is not applicable in JavaScript since all function calls are dynamically bound.\"), mdx(\"h3\", null, \"Static vs. Dynamic Binding\"), mdx(\"p\", null, \"Static binding refers to the process of resolving a method call at compile-time based on the type of the variable, while dynamic binding refers to the process of resolving a method call at runtime based on the actual type of the object.\"), mdx(\"p\", null, \"In \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"static binding\"), \", the compiler determines which method to call based on the type of the variable or reference. This means that the method to be called is determined at compile-time and cannot be changed at runtime. Static binding is also known as early binding.\"), mdx(\"p\", null, \"In \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dynamic binding\"), \", the method to be called is determined at runtime based on the actual type of the object. This means that the method to be called is not known until the program is executed. Dynamic binding is also known as late binding.\"), mdx(\"p\", null, \"Here's an example of static and dynamic binding in JavaScript:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// Static Binding Example\\nclass Shape {\\n  draw() {\\n    console.log(\\\"Drawing a shape\\\");\\n  }\\n}\\n\\nclass Circle extends Shape {\\n  draw() {\\n    console.log(\\\"Drawing a circle\\\");\\n  }\\n}\\n\\nlet shape = new Shape();\\nlet circle = new Circle();\\n\\nshape.draw(); // Output: \\\"Drawing a shape\\\"\\ncircle.draw(); // Output: \\\"Drawing a circle\\\"\\n\\n// Dynamic Binding Example\\nclass Animal {\\n  makeSound() {\\n    console.log(\\\"Animal sound\\\");\\n  }\\n}\\n\\nclass Dog extends Animal {\\n  makeSound() {\\n    console.log(\\\"Woof!\\\");\\n  }\\n}\\n\\nlet animal = new Animal();\\nlet dog = new Dog();\\n\\nanimal.makeSound(); // Output: \\\"Animal sound\\\"\\ndog.makeSound(); // Output: \\\"Woof!\\\"\\n\\nanimal = new Dog();\\nanimal.makeSound(); // Output: \\\"Woof!\\\"\\n\")), mdx(\"p\", null, \"In the static binding example, the method to be called is determined at compile-time based on the type of the variable or reference. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"draw()\"), \" method of Shape is called when the shape object is used, and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"draw()\"), \" method of Circle is called when the circle object is used.\"), mdx(\"p\", null, \"In the dynamic binding example, the method to be called is determined at runtime based on the actual type of the object. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"makeSound()\"), \" method of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" is called when the animal object is used, and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"makeSound()\"), \" method of Dog is called when the dog object is used. When the animal object is reassigned to a Dog object, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"makeSound()\"), \" method of Dog is called instead of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"makeSound()\"), \" method of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \". This is an example of late binding, where the method to be called is determined at runtime based on the actual type of the object.\"), mdx(\"h2\", null, \"Abstraction\"), mdx(\"p\", null, \"Abstraction is a fundamental concept in object-oriented programming that refers to the process of focusing only on the essential features of an object or system, while ignoring its unnecessary details. Abstraction allows us to represent complex systems in a simplified way, making it easier to understand and work with them.\"), mdx(\"p\", null, \"In programming, abstraction can be achieved through the use of abstract classes, interfaces, and other programming constructs that provide a high-level view of the system or object being modeled. By defining abstract classes and interfaces, we can establish a set of rules or requirements that must be followed by any classes that implement them.\"), mdx(\"p\", null, \"For example, suppose we are creating a program to manage a library system. We might create an abstract class called Item that defines the basic properties and methods that all library items must have, such as a title, author, and availability status. We could then create concrete classes that inherit from Item, such as Book and DVD, which provide specific implementations of the abstract methods and properties.\"), mdx(\"p\", null, \"Abstraction allows us to define a high-level view of the library system, without getting bogged down in the implementation details of each individual item. By working with abstract classes and interfaces, we can build more modular, flexible, and maintainable code that can adapt to changing requirements over time.\"), mdx(\"p\", null, \"Overall, abstraction is a powerful concept that allows us to create more efficient, modular, and extensible software systems. By focusing only on the essential features of an object or system, we can create more concise and effective solutions that can meet the needs of a wide range of applications.\"), mdx(\"p\", null, \"In JavaScript, abstraction can be achieved through the use of classes and interfaces. Here is an example of abstraction in JavaScript using classes:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Animal {\\n  constructor(name, type) {\\n    this.name = name;\\n    this.type = type;\\n  }\\n  // abstract method\\n  makeSound() {\\n    throw new Error('This method must be implemented');\\n  }\\n}\\n\\nclass Cat extends Animal {\\n  makeSound() {\\n    console.log('Meow');\\n  }\\n}\\n\\nclass Dog extends Animal {\\n  makeSound() {\\n    console.log('Woof');\\n  }\\n}\\n\\nconst cat = new Cat('Kitty', 'feline');\\ncat.makeSound(); // outputs: Meow\\n\\nconst dog = new Dog('Buddy', 'canine');\\ndog.makeSound(); // outputs: Woof\\n\")), mdx(\"p\", null, \"In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class has an abstract method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"makeSound()\"), \" which is meant to be implemented by its derived classes. The Cat and Dog classes inherit from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" and implement their own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"makeSound()\"), \" methods.\"), mdx(\"p\", null, \"When we create instances of Cat and Dog and call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"makeSound()\"), \" method, the corresponding sound is outputted.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"makeSound()\"), \" method in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" class is abstract because it does not have any implementation and throws an error if called. This forces any class that extends \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" to implement their own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"makeSound()\"), \" method, ensuring that the abstraction is respected.\"), mdx(\"h3\", null, \"Abstract Method\"), mdx(\"p\", null, \"An abstract method is a method that is declared in an abstract class or interface but does not have an implementation. It is meant to be overridden by the subclasses that inherit from the abstract class or interface.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// In JavaScript, there is no direct support for abstract methods, but they can be emulated using a combination of inheritance and error handling.\\n\\n\\n// Define an abstract class\\nclass Shape {\\n  constructor() {\\n    if (this.constructor === Shape) {\\n      throw new Error(\\\"Can't instantiate abstract class\\\");\\n    }\\n  }\\n  // Declare an abstract method\\n  draw() {\\n    throw new Error('Method \\\"draw\\\" must be implemented');\\n  }\\n}\\n\\n// Define a subclass that implements the abstract method\\nclass Rectangle extends Shape {\\n  draw() {\\n    console.log(\\\"Rectangle drawn\\\");\\n  }\\n}\\n\\n// Instantiate the subclass\\nconst rect = new Rectangle();\\nrect.draw(); // Output: \\\"Rectangle drawn\\\"\\n\\n// Attempt to instantiate the abstract class (will throw an error)\\nconst shape = new Shape(); // Throws: \\\"Can't instantiate abstract class\\\"\\n\")), mdx(\"p\", null, \"In this example, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \" class is defined as an abstract class that cannot be instantiated directly. The constructor of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \" class checks if the constructor is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \" and throws an error if it is, preventing the abstract class from being instantiated.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \" class also defines an abstract method called draw, which does not have an implementation. This method is meant to be overridden by the subclasses that inherit from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \" class.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Rectangle\"), \" class is a subclass of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \" that overrides the draw method with an implementation that logs a message to the console.\"), mdx(\"p\", null, \"Finally, we instantiate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Rectangle\"), \" class and call its draw method to output \\\"Rectangle drawn\\\" to the console. We also attempt to instantiate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shape\"), \" class directly, which throws an error because it is an abstract class that cannot be instantiated.\"), mdx(\"h3\", null, \"Abstract Classes\"), mdx(\"p\", null, \"Abstract classes are classes that cannot be instantiated and can only be used as base classes for other classes. They are often used to define a common interface or behavior that can be shared by multiple subclasses.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// In JavaScript, abstract classes can be simulated by using functions as constructors and adding abstract methods to the prototype of the function. Here is an example:\\n\\nfunction Animal() {}\\n\\nAnimal.prototype.eat = function() {\\n  throw new Error('Abstract method not implemented');\\n};\\n\\nfunction Dog() {}\\n\\nDog.prototype = Object.create(Animal.prototype);\\nDog.prototype.constructor = Dog;\\n\\nDog.prototype.eat = function() {\\n  console.log('Dog is eating');\\n};\\n\\nconst dog = new Dog();\\ndog.eat(); // outputs \\\"Dog is eating\\\"\\n\\nconst animal = new Animal();\\nanimal.eat(); // throws \\\"Abstract method not implemented\\\" error\\n\")), mdx(\"p\", null, \"In this example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" is an abstract class with an eat method that throws an error when called. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" is a subclass of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Animal\"), \" that implements the eat method by logging a message to the console. When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dog.eat()\"), \" is called, the implementation in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" is used. When animal.\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eat()\"), \" is called, the abstract method in Animal throws an error.\"), mdx(\"h2\", null, \"Interfaces\"), mdx(\"p\", null, \"In object-oriented programming, an interface is a collection of abstract methods that define a contract for what a class implementing the interface should do. An interface defines a set of methods that a class must implement in order to be considered \\\"compatible\\\" with the interface.\"), mdx(\"p\", null, \"An interface in JavaScript can be created using an object literal, or using the class keyword in combination with the implements keyword. Here's an example of an interface created using an object literal:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"const printable = {\\n  print: function() {}\\n};\\n\")), mdx(\"p\", null, \"In this example, printable is an interface that defines a single method print. Any object that implements this interface should have a method named print that takes no arguments.\"), mdx(\"p\", null, \"To implement an interface in JavaScript, you can define a class that implements the methods defined in the interface. Here's an example of a class that implements the printable interface:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class MyObject {\\n  print() {\\n    console.log('Printing...');\\n  }\\n}\\n\")), mdx(\"p\", null, \"In this example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyObject\"), \" implements the printable interface by defining a method print that matches the method defined in the interface. Any object of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyObject\"), \" can be treated as a printable object, because it implements the printable interface.\"), mdx(\"p\", null, \"Interfaces are useful in JavaScript because they allow you to define a contract that classes must adhere to, without prescribing a particular implementation. This allows you to write more flexible and reusable code, because you can write functions that accept any object that implements a particular interface, rather than requiring a specific class or implementation.\"), mdx(\"h3\", null, \"Creating and implementing interfaces\"), mdx(\"p\", null, \"In JavaScript, there is no built-in support for interfaces, but you can simulate them using objects and functions.\"), mdx(\"p\", null, \"To create an interface, you can define an object that specifies the methods that must be implemented by any class that implements the interface. Here is an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"let myInterface = {\\n  method1: function() {},\\n  method2: function() {},\\n  method3: function() {}\\n};\\n\\n\")), mdx(\"p\", null, \"This interface specifies three methods that must be implemented: method1, method2, and method3.\"), mdx(\"p\", null, \"To implement this interface in a class, you can define a constructor function that adds the required methods to the class prototype:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"function MyClass() {}\\n\\nMyClass.prototype.method1 = function() {};\\nMyClass.prototype.method2 = function() {};\\nMyClass.prototype.method3 = function() {};\\n\\n\")), mdx(\"p\", null, \"Now the MyClass class implements the myInterface interface.\"), mdx(\"p\", null, \"Alternatively, you can use the Object.assign method to add the required methods to the class prototype:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"function MyClass() {}\\n\\nObject.assign(MyClass.prototype, myInterface);\\n\\n\")), mdx(\"p\", null, \"This achieves the same result as the previous example.\"), mdx(\"p\", null, \"Once you have implemented an interface in a class, you can use it to ensure that an object conforms to the interface by checking for the presence of the required methods:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"function useInterface(obj) {\\n  if (typeof obj.method1 === 'function' &&\\n      typeof obj.method2 === 'function' &&\\n      typeof obj.method3 === 'function') {\\n    // obj implements the interface\\n  } else {\\n    // obj does not implement the interface\\n  }\\n}\\n\\n\")), mdx(\"p\", null, \"This useInterface function takes an object as its argument and checks whether it implements the myInterface interface.\"), mdx(\"p\", null, \"Note that in JavaScript, there is no way to enforce the implementation of an interface at compile-time, so it is up to the developer to ensure that the required methods are implemented correctly.\"), mdx(\"h3\", null, \"Multiple interfaces implementation\"), mdx(\"p\", null, \"In JavaScript, there is no built-in support for interfaces like in some other programming languages. However, we can still achieve the concept of implementing multiple interfaces through some workarounds.\"), mdx(\"p\", null, \"One way to simulate multiple interfaces implementation in JavaScript is by defining each interface as an object with method signatures and then implementing them in a class. Here's an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// Define two interfaces as objects\\nconst Printable = {\\n  print: function() {}\\n};\\n\\nconst Loggable = {\\n  log: function() {}\\n};\\n\\n// Implement both interfaces in a class\\nclass MyClass {\\n  print() {\\n    console.log('Printing...');\\n  }\\n\\n  log() {\\n    console.log('Logging...');\\n  }\\n}\\n\\n// Create an instance of the class and test the implemented methods\\nconst obj = new MyClass();\\nobj.print(); // Output: Printing...\\nobj.log(); // Output: Logging...\\n\\n\")), mdx(\"p\", null, \"In JavaScript, there is no built-in support for interfaces like in some other programming languages. However, we can still achieve the concept of implementing multiple interfaces through some workarounds.\"), mdx(\"p\", null, \"One way to simulate multiple interfaces implementation in JavaScript is by defining each interface as an object with method signatures and then implementing them in a class. Here's an example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"// Define two interfaces as objects\\nconst Printable = {\\n  print: function() {}\\n};\\n\\nconst Loggable = {\\n  log: function() {}\\n};\\n\\n// Implement both interfaces in a class\\nclass MyClass {\\n  print() {\\n    console.log('Printing...');\\n  }\\n\\n  log() {\\n    console.log('Logging...');\\n  }\\n}\\n\\n// Create an instance of the class and test the implemented methods\\nconst obj = new MyClass();\\nobj.print(); // Output: Printing...\\nobj.log(); // Output: Logging...\\n\")), mdx(\"p\", null, \"In the above example, we defined two interfaces as objects with method signatures. Then, we implemented both interfaces in a class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyClass\"), \" by defining methods with the same names as the signatures in the interfaces.\"), mdx(\"p\", null, \"Finally, we created an instance of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyClass\"), \" and called both methods to test if they are implemented correctly.\"), mdx(\"p\", null, \"Note that this is just one way of simulating multiple interfaces implementation in JavaScript, and there are other techniques that can be used depending on the specific requirements of the project.\"), mdx(\"h3\", null, \"Interfaces vs Abstract Classes\"), mdx(\"p\", null, \"Interfaces and abstract classes are both important concepts in object-oriented programming that allow developers to define common behaviors and create more flexible and maintainable code.\"), mdx(\"p\", null, \"An interface defines a contract that a class must implement, without providing any implementation details. It only specifies the methods that a class should implement and their signatures. Interfaces are used to achieve loose coupling, as they enable a class to interact with other classes without knowing their implementation details. In JavaScript, interfaces can be emulated using duck typing, which allows objects to be treated as if they have certain methods or properties based on their behavior.\"), mdx(\"p\", null, \"An abstract class, on the other hand, is a class that cannot be instantiated and serves as a blueprint for other classes to extend. It can provide some implementation details, as well as abstract methods that must be implemented by any concrete subclasses. Abstract classes are used to define common behavior and structure among a group of related classes. They can also be used to enforce certain rules or constraints on the subclasses.\"), mdx(\"p\", null, \"One key difference between interfaces and abstract classes is that a class can implement multiple interfaces, but it can only extend one abstract class. This makes interfaces more flexible and adaptable, as they allow a class to inherit behavior from multiple sources. Abstract classes, on the other hand, are more focused on defining a specific type of behavior and structure.\"), mdx(\"p\", null, \"Another difference is that interfaces only define method signatures, whereas abstract classes can provide some implementation details. This means that abstract classes can be more convenient to use in situations where some common behavior needs to be shared among subclasses, but with some variations in their implementation.\"), mdx(\"p\", null, \"Overall, interfaces and abstract classes are both important tools for creating flexible and maintainable code in object-oriented programming. The choice between them depends on the specific needs of the application and the desired level of structure and constraint on the classes.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Interfaces\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Abstract Classes\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Interfaces are a collection of method signatures.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Abstract classes can have both method\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Interfaces cannot have any state or instance variables.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Abstract classes can have state or\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Classes can implement multiple interfaces.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Classes can only extend one abstract class.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Interfaces can be seen as contracts that a class must implement.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Abstract classes are seen\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Interfaces are used to achieve polymorphism in object-oriented programming.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Abstract classes\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Methods in interfaces are implicitly public and abstract.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Methods in abstract classes can\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Interfaces do not allow constructors or destructors.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Abstract classes can have constructors\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Interfaces are useful for loosely coupled designs.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Abstract classes are useful for tightly\")))), mdx(\"h2\", null, \"Generics and Collections\"), mdx(\"h3\", null, \"Generics\"), mdx(\"p\", null, \"Generics in programming refer to the ability to create classes, functions, and types that can work with different data types, without specifying the type at the time of creation. This enables more reusable and flexible code, as it allows developers to write code that can work with a variety of data types, rather than having to write separate code for each type.\"), mdx(\"p\", null, \"Generics are commonly used in languages like Java, C#, and TypeScript, but are also available in other languages like C++, Python, and Swift.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Some of the key advantages of using generics include:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Reusability:\"), \" Generics allow code to be written in a way that can be reused with different data types, reducing code duplication and promoting modular design.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Type safety:\"), \" Generics help to catch type-related errors at compile-time, rather than at runtime, which can help to prevent bugs and improve the stability of the code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Flexibility:\"), \" Generics allow developers to create classes and functions that can work with a wide range of data types, which can make code more adaptable and easier to maintain.\")), mdx(\"p\", null, \"To use generics, a type parameter is added to the class or function declaration, which specifies the type that the class or function will work with. This type parameter is then used throughout the class or function in place of a specific data type.\"), mdx(\"p\", null, \"For example, in TypeScript, a generic function that takes an array of a generic type T and returns the first element of the array might look like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-TS\"\n  }, \"function getFirst<T>(arr: T[]): T {\\n  return arr[0];\\n}\\n\")), mdx(\"p\", null, \"Here, the function takes an array of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T\"), \", which can be any data type, and returns an element of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T\"), \", which could be the same or a different data type. When the function is called, the type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T\"), \" is inferred from the argument passed in, and the function works with that data type accordingly.\"), mdx(\"p\", null, \"Overall, generics are a powerful tool for creating reusable, flexible, and type-safe code, and are widely used in modern programming languages.\"), mdx(\"h3\", null, \"Collections\"), mdx(\"p\", null, \"In software development, a collection is a container object that groups multiple elements into a single unit. Collections provide a way to store, retrieve, manipulate, and communicate aggregate data.\"), mdx(\"p\", null, \"In most programming languages, collections are implemented as classes or data structures that provide specific operations for working with collections, such as adding, removing, or iterating over elements.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Some common types of collections include:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Lists:\"), \" ordered collections of elements that allow duplicates\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Sets:\"), \" unordered collections of unique elements\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Maps:\"), \" collections of key-value pairs, also known as dictionaries or associative arrays\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Queues:\"), \" collections that allow elements to be inserted at one end and removed from the other in a first-in, first-out (FIFO) order\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Stacks:\"), \" collections that allow elements to be inserted and removed from one end only in a last-in, first-out (LIFO) order\")), mdx(\"p\", null, \"Collections are used in a wide variety of software applications, from simple scripts to complex enterprise systems. They provide a powerful abstraction for working with large amounts of data and are often a key component in algorithms and data structures.\"), mdx(\"p\", null, \"In addition to the standard collections provided by programming languages, many third-party libraries and frameworks also provide their own collection classes that offer specialized functionality, such as thread-safe collections, immutable collections, or collections optimized for specific use cases.\"), mdx(\"h3\", null, \"Generics vs Collections\"), mdx(\"p\", null, \"Generics and Collections are two important features in Java programming. They have some similarities, but they serve different purposes. Here is a comparison table that highlights the differences between the two:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Feature\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Generics\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Collections\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Purpose\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type safety\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Grouping and managing objects\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Primary use\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Defining data structures and APIs\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Storing and retrieving objects\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Syntax\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Uses angle brackets \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(<>)\"), \", type parameters, and wildcards\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Uses classes such as ArrayList and HashMap\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type casting\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Not required, since the type is known at compile time\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Required when retrieving elements from a collection\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Flexibility\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"More flexible, since it allows for generic type parameters and wildcards\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Less flexible, since it is limited to specific classes\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Performance\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Better performance, since it avoids unnecessary type casting\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Lower performance, since it requires type casting\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Error handling\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Compile-time errors can be caught early\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Runtime errors can occur if types are not checked carefully\")))), mdx(\"p\", null, \"In summary, Generics provide a way to define type-safe data structures and APIs, while Collections provide a way to group and manage objects. Generics are more flexible and provide better performance, while Collections are less flexible and require type casting.\"), mdx(\"h3\", null, \"Defining and using generic classes and methods\"), mdx(\"p\", null, \"In JavaScript, there is no built-in support for generic classes or methods. However, there are some workarounds that allow you to achieve similar functionality.\"), mdx(\"p\", null, \"One approach is to use function overloading to create generic functions. For example, you could define a function that takes an array of any type and returns the first element:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"function first(arr) {\\n  return arr[0];\\n}\\n\")), mdx(\"p\", null, \"This function will work with any array, regardless of its type. However, it doesn't provide any type safety, so you could accidentally pass in an array of the wrong type and get unexpected results.\"), mdx(\"p\", null, \"Another approach is to use TypeScript, which provides built-in support for generics. With TypeScript, you can define generic classes and methods that provide type safety and enable code reuse.\"), mdx(\"p\", null, \"Here's an example of a generic class in TypeScript:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"class Stack<T> {\\n  private items: T[] = [];\\n\\n  push(item: T) {\\n    this.items.push(item);\\n  }\\n\\n  pop(): T | undefined {\\n    return this.items.pop();\\n  }\\n}\\n\")), mdx(\"p\", null, \"This Stack class can store any type of object, thanks to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<T>\"), \" syntax that defines it as a generic class. The push method takes an argument of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T\"), \", and the pop method returns a value of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T\"), \" or undefined.\"), mdx(\"p\", null, \"To create an instance of this class with a specific type, you can specify the type when you instantiate it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"const numberStack = new Stack<number>();\\nnumberStack.push(1);\\nnumberStack.push(2);\\nconsole.log(numberStack.pop()); // 2\\n\\nconst stringStack = new Stack<string>();\\nstringStack.push('hello');\\nstringStack.push('world');\\nconsole.log(stringStack.pop()); // 'world'\\n\\n\")), mdx(\"p\", null, \"Here, we create two instances of the Stack class, one that stores numbers and one that stores strings. When we call the push method, TypeScript ensures that we only pass in values of the correct type. When we call the pop method, TypeScript knows what type of value to expect, so it provides type safety.\"), mdx(\"h3\", null, \"Generic Collections\"), mdx(\"p\", null, \"Generic collections are collections that can store objects of any type in a type-safe manner. They are implemented using generics, which allow the creation of type-specific classes or methods that can work with any data type.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Some commonly used generic collections in C# include:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"List<T>\"), \":\"), \" A dynamic array that can store elements of any type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"T\"), \" in a contiguous memory location. It provides fast access to elements by index and supports adding, removing, and searching for elements.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-TS\"\n  }, \"List<int> numbers = new List<int>();\\nnumbers.Add(1);\\nnumbers.Add(2);\\nnumbers.Add(3);\\nnumbers.RemoveAt(1);\\nConsole.WriteLine(numbers[1]); // Output: 3\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Dictionary<TKey, TValue>\"), \":\"), \" A collection of key-value pairs that can store elements of any type TKey as keys and elements of any type TValue as values. It provides fast access to values by key and supports adding, removing, and searching for key-value pairs.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-TS\"\n  }, \"Dictionary<string, int> scores = new Dictionary<string, int>();\\nscores.Add(\\\"Alice\\\", 95);\\nscores.Add(\\\"Bob\\\", 85);\\nscores.Add(\\\"Charlie\\\", 90);\\nscores.Remove(\\\"Bob\\\");\\nConsole.WriteLine(scores[\\\"Charlie\\\"]); // Output: 90\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Queue<T>\"), \":\"), \" A collection that represents a first-in, first-out (FIFO) data structure. It can store elements of any type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"T\"), \" and supports adding, removing, and peeking at elements.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-TS\"\n  }, \"Queue<string> names = new Queue<string>();\\nnames.Enqueue(\\\"Alice\\\");\\nnames.Enqueue(\\\"Bob\\\");\\nnames.Enqueue(\\\"Charlie\\\");\\nnames.Dequeue();\\nConsole.WriteLine(names.Peek()); // Output: Bob\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Stack<T>\"), \":\"), \" A collection that represents a last-in, first-out (LIFO) data structure. It can store elements of any type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"T\"), \" and supports adding, removing, and peeking at elements.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-TS\"\n  }, \"Stack<int> numbers = new Stack<int>();\\nnumbers.Push(1);\\nnumbers.Push(2);\\nnumbers.Push(3);\\nnumbers.Pop();\\nConsole.WriteLine(numbers.Peek()); // Output: 2\\n\")), mdx(\"h3\", null, \"Iterating over Collections\"), mdx(\"p\", null, \"Iterating over collections refers to the process of accessing and processing each element in a collection (such as an array, list, or dictionary) sequentially. There are different ways to iterate over a collection in JavaScript, depending on the type of collection and the use case.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"For Loop:\"), \" A for loop can be used to iterate over an array or a collection with a known length. \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"let fruits = [\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\"];\\n\\nfor (let i = 0; i < fruits.length; i++) {\\n  console.log(fruits[i]);\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"For...of Loop:\"), \" A for...of loop can be used to iterate over any iterable object, including arrays, strings, and certain built-in objects such as NodeList and Map.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"let mySet = new Set([1, 2, 3]);\\n\\nfor (let value of mySet) {\\n  console.log(value);\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"forEach():\"), \" The forEach() method can be used to iterate over an array and execute a callback function for each element.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"let numbers = [1, 2, 3];\\n\\nnumbers.forEach(function(number) {\\n  console.log(number);\\n});\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Object.keys():\"), \" The Object.keys() method can be used to iterate over the keys of an object.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"let myObject = {a: 1, b: 2, c: 3};\\n\\nObject.keys(myObject).forEach(function(key) {\\n  console.log(key);\\n});\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Map:\"), \" The Map object provides a way to iterate over its key-value pairs using the forEach() method or the for...of loop.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-JS\"\n  }, \"let myMap = new Map();\\n\\nmyMap.set(\\\"key1\\\", \\\"value1\\\");\\nmyMap.set(\\\"key2\\\", \\\"value2\\\");\\nmyMap.set(\\\"key3\\\", \\\"value3\\\");\\n\\nmyMap.forEach(function(value, key) {\\n  console.log(key + \\\" = \\\" + value);\\n});\\n\")))), mdx(\"p\", null, \"Overall, there are various ways to iterate over collections in JavaScript, and the choice of method depends on the type of collection and the specific use case.\"), mdx(\"h2\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://blog.hubspot.com/website/object-oriented-programming\"\n  }, \"https://blog.hubspot.com/website/object-oriented-programming\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#introduction","title":"Introduction"},{"url":"#classes-and-objects","title":"Classes and Objects","items":[{"url":"#classes","title":"Classes"},{"url":"#objects","title":"Objects"}]},{"url":"#methods-and-its-types","title":"Methods and its types","items":[{"url":"#types-of-methods","title":"Types of Methods"}]},{"url":"#class-members","title":"Class Members","items":[{"url":"#constructors-and-destructors","title":"Constructors and Destructors","items":[{"url":"#class-constructors","title":"Class constructors"},{"url":"#object-initialization","title":"Object initialization"},{"url":"#class-destructors","title":"Class destructors"}]}]},{"url":"#modifiers","title":"Modifiers","items":[{"url":"#access-modifiers","title":"Access Modifiers"},{"url":"#member-modifiers","title":"Member Modifiers"},{"url":"#class-level-modifiers","title":"Class Level Modifiers"}]},{"url":"#encapsulation","title":"Encapsulation","items":[{"url":"#properties-and-methods-encapsulation","title":"Properties and methods encapsulation"},{"url":"#data-hiding","title":"Data Hiding"},{"url":"#tightly-encapsulated-class","title":"Tightly Encapsulated Class"},{"url":"#accessor-methods","title":"Accessor methods","items":[{"url":"#getters","title":"Getters"},{"url":"#setters","title":"Setters"}]}]},{"url":"#inheritance","title":"Inheritance","items":[{"url":"#types-of-inheritance","title":"Types of Inheritance","items":[{"url":"#single-inheritance","title":"Single Inheritance"},{"url":"#multiple-inheritance","title":"Multiple Inheritance"},{"url":"#multi-level-inheritance","title":"Multi-level Inheritance"},{"url":"#hierarchical-inheritance","title":"Hierarchical Inheritance"},{"url":"#hybrid-inheritance","title":"Hybrid Inheritance"}]},{"url":"#base-classes-and-derived-classes","title":"Base Classes and Derived Classes","items":[{"url":"#base-classes","title":"Base Classes"},{"url":"#derived-classes","title":"Derived Classes"}]},{"url":"#overriding-methods-and-properties","title":"Overriding methods and properties"},{"url":"#hiding-methods-and-properties","title":"Hiding methods and properties"},{"url":"#accessing-base-class-members","title":"Accessing base class members"},{"url":"#cyclic-inheritance","title":"Cyclic Inheritance"}]},{"url":"#polymorphism","title":"Polymorphism","items":[{"url":"#types-of-polymorphism","title":"Types of Polymorphism","items":[{"url":"#method-overloading","title":"Method Overloading"},{"url":"#method-overriding","title":"Method Overriding"},{"url":"#method-hiding","title":"Method Hiding"}]},{"url":"#method-signature","title":"Method Signature"},{"url":"#overriding-vs-overloading","title":"Overriding vs. Overloading"},{"url":"#object-typecasting","title":"Object Typecasting"},{"url":"#virtual-and-abstract-methods","title":"Virtual and Abstract Methods","items":[{"url":"#virtual-methods","title":"Virtual Methods"},{"url":"#abstract-method","title":"Abstract Method"}]},{"url":"#late-binding-and-early-binding","title":"Late Binding and Early Binding"},{"url":"#static-vs-dynamic-binding","title":"Static vs. Dynamic Binding"}]},{"url":"#abstraction","title":"Abstraction","items":[{"url":"#abstract-method-1","title":"Abstract Method"},{"url":"#abstract-classes","title":"Abstract Classes"}]},{"url":"#interfaces","title":"Interfaces","items":[{"url":"#creating-and-implementing-interfaces","title":"Creating and implementing interfaces"},{"url":"#multiple-interfaces-implementation","title":"Multiple interfaces implementation"},{"url":"#interfaces-vs-abstract-classes","title":"Interfaces vs Abstract Classes"}]},{"url":"#generics-and-collections","title":"Generics and Collections","items":[{"url":"#generics","title":"Generics"},{"url":"#collections","title":"Collections"},{"url":"#generics-vs-collections","title":"Generics vs Collections"},{"url":"#defining-and-using-generic-classes-and-methods","title":"Defining and using generic classes and methods"},{"url":"#generic-collections","title":"Generic Collections"},{"url":"#iterating-over-collections","title":"Iterating over Collections"}]},{"url":"#resources","title":"Resources"}]},"parent":{"relativePath":"software-design-and-architecture/3.object-oriented-programming.md"},"frontmatter":{"metaTitle":"Object Oriented Programming | DevBucket","metaDescription":""}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/web-application-design-principles-and-architecture/1.web-application-development","title":"Web Application Development"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/1.clean-code","title":"Clean Code"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/2.programming-paradigms","title":"Programming Paradigms"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/1.clean-code/learn","title":"Clean Code Daily Read"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm","title":"Data Structure and Algorithm"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure","title":"Data Structure"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/1.complexities-and-notations","title":"Complexities and Notations"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/1.strings","title":"Strings"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/10.tree","title":"Trees"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/11.graph","title":"Graph"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/14.matrix","title":"Matrix"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/12.hash-table","title":"Hash Table"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/13.heap","title":"Heap"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/15.grid","title":"Grid"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/16.trie","title":"Trie"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/2.array","title":"Array"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/3.sets","title":"Sets"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/4.maps","title":"Maps"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/5.dictionary","title":"Dictionary"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/6.tuples","title":"Tuples"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/8.stacks","title":"Stacks"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/7.linked-list","title":"Linked List"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/2.data-structure/9.queues","title":"Queues"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/4.coding-patterns","title":"Coding Patterns"}}},{"node":{"fields":{"slug":"/data-structure-and-algorithm/3.algorithm","title":"Algorithm"}}},{"node":{"fields":{"slug":"/","title":"DevBucket"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks","title":"Programming Language"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/1.html","title":"HTML"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/2.css","title":"CSS"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/2.css/flexbox","title":"CSS Flexbox"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/3.javascript","title":"JavaScript"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/5.node-js","title":"NodeJS"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/6.go","title":"GO"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/7.sql","title":"SQL"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/4.react-js/reack-hooks","title":"React Hooks"}}},{"node":{"fields":{"slug":"/software-design-and-architecture","title":"Software Design and Architecture"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/4.software-design-principles","title":"Software Design Principles"}}},{"node":{"fields":{"slug":"/software-development-tools","title":"Software Development Tools"}}},{"node":{"fields":{"slug":"/software-development-tools/postman","title":"Postman"}}},{"node":{"fields":{"slug":"/system-design-and-architecture","title":"System Design and Architecture"}}},{"node":{"fields":{"slug":"/system-design-and-architecture/1.database-design-and-management","title":"Database Design and Management"}}},{"node":{"fields":{"slug":"/system-design-and-architecture/2.architecture-design-documentation","title":"Architecture Design Documentation"}}},{"node":{"fields":{"slug":"/technical-career-path-and-guide","title":" Technical Career Path and Guide"}}},{"node":{"fields":{"slug":"/technical-career-path-and-guide/1.quality-assurance-engineer","title":"Quality Assurance Engineer"}}},{"node":{"fields":{"slug":"/web-application-design-principles-and-architecture","title":"Web Application Design and Architecture"}}},{"node":{"fields":{"slug":"/web-application-security","title":"Web Application Security"}}},{"node":{"fields":{"slug":"/web-application-security/1.authentication-and-authorization","title":"Authentication and Authorization"}}},{"node":{"fields":{"slug":"/technical-career-path-and-guide/2.chrome-extension-development","title":"Chrome Extension Development"}}},{"node":{"fields":{"slug":"/web-application-security/1.authentication-and-authorization/1.json-web-tokens","title":"JSON Web Tokens"}}},{"node":{"fields":{"slug":"/web-application-security/2.web-security-best-practices/1.developer-security-tips","title":"Developer Security Tips"}}},{"node":{"fields":{"slug":"/web-application-security/2.web-security-best-practices","title":"Web Security Best Practices"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/4.software-design-principles/1.solid-principles","title":"SOLID Principles"}}},{"node":{"fields":{"slug":"/programming-languages-libraries-and-frameworks/4.react-js","title":"ReactJS"}}},{"node":{"fields":{"slug":"/software-design-and-architecture/3.object-oriented-programming","title":"Object Oriented Programming"}}}]}},"pageContext":{"id":"bd153a25-9577-523c-bcf1-f6cfb0695aff"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}